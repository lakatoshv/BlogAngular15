{"version":3,"file":"angular-token.js.map","sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AngularTokenOptions\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType != null) {\n      return this.userType.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData;\n  }\n\n  get apiBase(): string {\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  private userType: UserType;\n  private authData: AuthData;\n  private userData: UserData;\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(platformId)) {\n      this.global = {\n        open: () => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      this.localStorage.setItem = () => null;\n      this.localStorage.getItem = () => null;\n      this.localStorage.removeItem = () => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n      return !!this.authData;\n  }\n\n  canActivate(route, state): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<any> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType = null;\n    } else {\n      this.userType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post(this.getServerPath() + this.options.registerAccountPath, registerData);\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<any> {\n    return this.http.delete(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<any> {\n    this.userType = (signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType);\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    const observ = this.http.post(this.getServerPath() + this.options.signInPath, body, { observe: 'response' }).pipe(share());\n\n    observ.subscribe(res => this.userData = res.body['data']);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<any> {\n    const observ = this.http.delete<any>(this.getServerPath() + this.options.signOutPath)\n    // Only remove the localStorage and clear the data after the call\n          .pipe(\n            finalize(() => {\n                this.localStorage.removeItem('accessToken');\n                this.localStorage.removeItem('client');\n                this.localStorage.removeItem('expiry');\n                this.localStorage.removeItem('tokenType');\n                this.localStorage.removeItem('uid');\n\n                this.authData = null;\n                this.userType = null;\n                this.userData = null;\n              }\n            )\n          );\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<any> {\n    const observ = this.http.get(this.getServerPath() + this.options.validateTokenPath).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData = res['data'],\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<any> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<any> {\n\n    this.userType = (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType);\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType == null) ? '' : this.userType.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n    if (this.userType != null) {\n      url += `&resource_class=${this.userType.name}`;\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData = authData;\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData = authData;\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType != null) {\n        this.localStorage.setItem('userType', this.userType.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData != null) {\n        return authData.expiry >= this.authData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n  private atOptions: AngularTokenOptions;\n\n  constructor( private tokenService: AngularTokenService ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    if (this.tokenService.currentAuthData && (this.tokenService.apiBase === null || req.url.match(this.tokenService.apiBase))) {\n\n      const headers = {\n        'access-token': this.tokenService.currentAuthData.accessToken,\n        'client':       this.tokenService.currentAuthData.client,\n        'expiry':       this.tokenService.currentAuthData.expiry,\n        'token-type':   this.tokenService.currentAuthData.tokenType,\n        'uid':          this.tokenService.currentAuthData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: any): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.apiBase === null || (res.url && res.url.match(this.tokenService.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(<any>res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}

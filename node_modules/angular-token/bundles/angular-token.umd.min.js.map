{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","userType","name","undefined","userData","authData","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","observe","pipe","share","subscribe","res","signInOAuth","oAuthType","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","Error","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","error","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","data","headers","accessToken","client","expiry","tokenType","uid","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","authWindow","pollerObserv","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","pollerSubscription","bind","closed","unsubscribe","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","next","currentAuthData","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AngularTokenOptions\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType != null) {\n      return this.userType.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData;\n  }\n\n  get apiBase(): string {\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  private userType: UserType;\n  private authData: AuthData;\n  private userData: UserData;\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(platformId)) {\n      this.global = {\n        open: () => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      this.localStorage.setItem = () => null;\n      this.localStorage.getItem = () => null;\n      this.localStorage.removeItem = () => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n      return !!this.authData;\n  }\n\n  canActivate(route, state): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<any> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType = null;\n    } else {\n      this.userType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post(this.getServerPath() + this.options.registerAccountPath, registerData);\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<any> {\n    return this.http.delete(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<any> {\n    this.userType = (signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType);\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    const observ = this.http.post(this.getServerPath() + this.options.signInPath, body, { observe: 'response' }).pipe(share());\n\n    observ.subscribe(res => this.userData = res.body['data']);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<any> {\n    const observ = this.http.delete<any>(this.getServerPath() + this.options.signOutPath)\n    // Only remove the localStorage and clear the data after the call\n          .pipe(\n            finalize(() => {\n                this.localStorage.removeItem('accessToken');\n                this.localStorage.removeItem('client');\n                this.localStorage.removeItem('expiry');\n                this.localStorage.removeItem('tokenType');\n                this.localStorage.removeItem('uid');\n\n                this.authData = null;\n                this.userType = null;\n                this.userData = null;\n              }\n            )\n          );\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<any> {\n    const observ = this.http.get(this.getServerPath() + this.options.validateTokenPath).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData = res['data'],\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<any> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<any> {\n\n    this.userType = (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType);\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType == null) ? '' : this.userType.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n    if (this.userType != null) {\n      url += `&resource_class=${this.userType.name}`;\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData = authData;\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData = authData;\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType != null) {\n        this.localStorage.setItem('userType', this.userType.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData != null) {\n        return authData.expiry >= this.authData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n  private atOptions: AngularTokenOptions;\n\n  constructor( private tokenService: AngularTokenService ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    if (this.tokenService.currentAuthData && (this.tokenService.apiBase === null || req.url.match(this.tokenService.apiBase))) {\n\n      const headers = {\n        'access-token': this.tokenService.currentAuthData.accessToken,\n        'client':       this.tokenService.currentAuthData.client,\n        'expiry':       this.tokenService.currentAuthData.expiry,\n        'token-type':   this.tokenService.currentAuthData.tokenType,\n        'uid':          this.tokenService.currentAuthData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: any): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.apiBase === null || (res.url && res.url.match(this.tokenService.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(<any>res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}
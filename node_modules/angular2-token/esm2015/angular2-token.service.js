/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Http, Headers, Request, RequestMethod, RequestOptions } from '@angular/http';
import { interval, fromEvent } from 'rxjs';
import { share, pluck, filter } from 'rxjs/operators';
export class Angular2TokenService {
    /**
     * @param {?} http
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(http, activatedRoute, router) {
        this.http = http;
        this.activatedRoute = activatedRoute;
        this.router = router;
    }
    /**
     * @return {?}
     */
    get currentUserType() {
        if (this.atCurrentUserType != null)
            return this.atCurrentUserType.name;
        else
            return null;
    }
    /**
     * @return {?}
     */
    get currentUserData() {
        return this.atCurrentUserData;
    }
    /**
     * @return {?}
     */
    get currentAuthData() {
        return this.atCurrentAuthData;
    }
    /**
     * @return {?}
     */
    get currentAuthHeaders() {
        if (this.atCurrentAuthData != null) {
            return new Headers({
                'access-token': this.atCurrentAuthData.accessToken,
                'client': this.atCurrentAuthData.client,
                'expiry': this.atCurrentAuthData.expiry,
                'token-type': this.atCurrentAuthData.tokenType,
                'uid': this.atCurrentAuthData.uid
            });
        }
        return new Headers;
    }
    /**
     * @return {?}
     */
    userSignedIn() {
        return !!this.atCurrentAuthData;
    }
    /**
     * @return {?}
     */
    canActivate() {
        if (this.userSignedIn())
            return true;
        else {
            // Store current location in storage (usefull for redirection after signing in)
            if (this.atOptions.signInStoredUrlStorageKey) {
                localStorage.setItem(this.atOptions.signInStoredUrlStorageKey, window.location.pathname + window.location.search);
            }
            // Redirect user to sign in if signInRedirect is set
            if (this.router && this.atOptions.signInRedirect)
                this.router.navigate([this.atOptions.signInRedirect]);
            return false;
        }
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    init(options) {
        let /** @type {?} */ defaultOptions = {
            apiPath: null,
            apiBase: null,
            signInPath: 'auth/sign_in',
            signInRedirect: null,
            signInStoredUrlStorageKey: null,
            signOutPath: 'auth/sign_out',
            validateTokenPath: 'auth/validate_token',
            signOutFailedValidate: false,
            registerAccountPath: 'auth',
            deleteAccountPath: 'auth',
            registerAccountCallback: window.location.href,
            updatePasswordPath: 'auth',
            resetPasswordPath: 'auth/password',
            resetPasswordCallback: window.location.href,
            userTypes: null,
            oAuthBase: window.location.origin,
            oAuthPaths: {
                github: 'auth/github'
            },
            oAuthCallbackPath: 'oauth_callback',
            oAuthWindowType: 'newWindow',
            oAuthWindowOptions: null,
            globalOptions: {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            }
        };
        this.atOptions = (/** @type {?} */ (Object)).assign(defaultOptions, options);
        this.tryLoadAuthData();
    }
    /**
     *
     * Actions
     *
     * @param {?} registerData
     * @return {?}
     */
    registerAccount(registerData) {
        if (registerData.userType == null)
            this.atCurrentUserType = null;
        else {
            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);
            delete registerData.userType;
        }
        if (registerData["password_confirmation"] == null &&
            registerData.passwordConfirmation != null) {
            registerData["password_confirmation"] = registerData.passwordConfirmation;
            delete registerData.passwordConfirmation;
        }
        registerData["confirm_success_url"] = this.atOptions.registerAccountCallback;
        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));
    }
    /**
     * @return {?}
     */
    deleteAccount() {
        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);
    }
    /**
     * @param {?} signInData
     * @return {?}
     */
    signIn(signInData) {
        if (signInData.userType == null)
            this.atCurrentUserType = null;
        else
            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);
        let /** @type {?} */ body = JSON.stringify({
            email: signInData.email,
            password: signInData.password
        });
        let /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);
        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);
        return observ;
    }
    /**
     * @param {?} oAuthType
     * @return {?}
     */
    signInOAuth(oAuthType) {
        let /** @type {?} */ oAuthPath = this.getOAuthPath(oAuthType);
        let /** @type {?} */ callbackUrl = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;
        let /** @type {?} */ oAuthWindowType = this.atOptions.oAuthWindowType;
        let /** @type {?} */ authUrl = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);
        if (oAuthWindowType == 'newWindow') {
            let /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;
            let /** @type {?} */ windowOptions = '';
            if (oAuthWindowOptions) {
                for (let /** @type {?} */ key in oAuthWindowOptions) {
                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;
                }
            }
            let /** @type {?} */ popup = window.open(authUrl, '_blank', `closebuttoncaption=Cancel${windowOptions}`);
            return this.requestCredentialsViaPostMessage(popup);
        }
        else if (oAuthWindowType == 'sameWindow') {
            window.location.href = authUrl;
        }
        else {
            throw `Unsupported oAuthWindowType "${oAuthWindowType}"`;
        }
    }
    /**
     * @return {?}
     */
    processOAuthCallback() {
        this.getAuthDataFromParams();
    }
    /**
     * @return {?}
     */
    signOut() {
        let /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);
        localStorage.removeItem('accessToken');
        localStorage.removeItem('client');
        localStorage.removeItem('expiry');
        localStorage.removeItem('tokenType');
        localStorage.removeItem('uid');
        this.atCurrentAuthData = null;
        this.atCurrentUserType = null;
        this.atCurrentUserData = null;
        return observ;
    }
    /**
     * @return {?}
     */
    validateToken() {
        let /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);
        observ.subscribe(res => this.atCurrentUserData = res.json().data, error => {
            if (error.status === 401 && this.atOptions.signOutFailedValidate) {
                this.signOut();
            }
        });
        return observ;
    }
    /**
     * @param {?} updatePasswordData
     * @return {?}
     */
    updatePassword(updatePasswordData) {
        if (updatePasswordData.userType != null)
            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);
        let /** @type {?} */ args;
        if (updatePasswordData.passwordCurrent == null) {
            args = {
                password: updatePasswordData.password,
                password_confirmation: updatePasswordData.passwordConfirmation
            };
        }
        else {
            args = {
                current_password: updatePasswordData.passwordCurrent,
                password: updatePasswordData.password,
                password_confirmation: updatePasswordData.passwordConfirmation
            };
        }
        if (updatePasswordData.resetPasswordToken) {
            args.reset_password_token = updatePasswordData.resetPasswordToken;
        }
        let /** @type {?} */ body = JSON.stringify(args);
        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);
    }
    /**
     * @param {?} resetPasswordData
     * @return {?}
     */
    resetPassword(resetPasswordData) {
        if (resetPasswordData.userType == null)
            this.atCurrentUserType = null;
        else
            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);
        let /** @type {?} */ body = JSON.stringify({
            email: resetPasswordData.email,
            redirect_url: this.atOptions.resetPasswordCallback
        });
        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);
    }
    /**
     *
     * HTTP Wrappers
     *
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Get
        }, options));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    post(url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Post,
            body: body
        }, options));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    put(url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Put,
            body: body
        }, options));
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    delete(url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Delete
        }, options));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    patch(url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Patch,
            body: body
        }, options));
    }
    /**
     * @param {?} path
     * @param {?=} options
     * @return {?}
     */
    head(path, options) {
        return this.request({
            method: RequestMethod.Head,
            url: this.getApiPath() + path
        });
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    options(url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Options
        }, options));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    request(options) {
        let /** @type {?} */ baseRequestOptions;
        let /** @type {?} */ baseHeaders = this.atOptions.globalOptions.headers;
        // Get auth data from local storage
        this.getAuthDataFromStorage();
        // Merge auth headers to request if set
        if (this.atCurrentAuthData != null) {
            (/** @type {?} */ (Object)).assign(baseHeaders, {
                'access-token': this.atCurrentAuthData.accessToken,
                'client': this.atCurrentAuthData.client,
                'expiry': this.atCurrentAuthData.expiry,
                'token-type': this.atCurrentAuthData.tokenType,
                'uid': this.atCurrentAuthData.uid
            });
        }
        baseRequestOptions = new RequestOptions({
            headers: new Headers(baseHeaders)
        });
        // Merge standard and custom RequestOptions
        baseRequestOptions = baseRequestOptions.merge(options);
        let /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).pipe(share());
        this.handleResponse(response);
        return response;
    }
    /**
     * @param {?} options
     * @param {?=} addOptions
     * @return {?}
     */
    mergeRequestOptionsArgs(options, addOptions) {
        let /** @type {?} */ returnOptions = options;
        if (options)
            (/** @type {?} */ (Object)).assign(returnOptions, addOptions);
        return returnOptions;
    }
    /**
     * @param {?} response
     * @return {?}
     */
    handleResponse(response) {
        response.subscribe(res => {
            this.getAuthHeadersFromResponse(/** @type {?} */ (res));
        }, error => {
            this.getAuthHeadersFromResponse(/** @type {?} */ (error));
        });
    }
    /**
     *
     * Get Auth Data
     *
     * @return {?}
     */
    tryLoadAuthData() {
        let /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));
        if (userType)
            this.atCurrentUserType = userType;
        this.getAuthDataFromStorage();
        if (this.activatedRoute)
            this.getAuthDataFromParams();
        if (this.atCurrentAuthData)
            this.validateToken();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getAuthHeadersFromResponse(data) {
        let /** @type {?} */ headers = data.headers;
        let /** @type {?} */ authData = {
            accessToken: headers.get('access-token'),
            client: headers.get('client'),
            expiry: headers.get('expiry'),
            tokenType: headers.get('token-type'),
            uid: headers.get('uid')
        };
        this.setAuthData(authData);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getAuthDataFromPostMessage(data) {
        let /** @type {?} */ authData = {
            accessToken: data['auth_token'],
            client: data['client_id'],
            expiry: data['expiry'],
            tokenType: 'Bearer',
            uid: data['uid']
        };
        this.setAuthData(authData);
    }
    /**
     * @return {?}
     */
    getAuthDataFromStorage() {
        let /** @type {?} */ authData = {
            accessToken: localStorage.getItem('accessToken'),
            client: localStorage.getItem('client'),
            expiry: localStorage.getItem('expiry'),
            tokenType: localStorage.getItem('tokenType'),
            uid: localStorage.getItem('uid')
        };
        if (this.checkAuthData(authData))
            this.atCurrentAuthData = authData;
    }
    /**
     * @return {?}
     */
    getAuthDataFromParams() {
        if (this.activatedRoute.queryParams)
            // Fix for Testing, needs to be removed later
            this.activatedRoute.queryParams.subscribe(queryParams => {
                let /** @type {?} */ authData = {
                    accessToken: queryParams['token'] || queryParams['auth_token'],
                    client: queryParams['client_id'],
                    expiry: queryParams['expiry'],
                    tokenType: 'Bearer',
                    uid: queryParams['uid']
                };
                if (this.checkAuthData(authData))
                    this.atCurrentAuthData = authData;
            });
    }
    /**
     *
     * Set Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    setAuthData(authData) {
        if (this.checkAuthData(authData)) {
            this.atCurrentAuthData = authData;
            localStorage.setItem('accessToken', authData.accessToken);
            localStorage.setItem('client', authData.client);
            localStorage.setItem('expiry', authData.expiry);
            localStorage.setItem('tokenType', authData.tokenType);
            localStorage.setItem('uid', authData.uid);
            if (this.atCurrentUserType != null)
                localStorage.setItem('userType', this.atCurrentUserType.name);
        }
    }
    /**
     *
     * Validate Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    checkAuthData(authData) {
        if (authData.accessToken != null &&
            authData.client != null &&
            authData.expiry != null &&
            authData.tokenType != null &&
            authData.uid != null) {
            if (this.atCurrentAuthData != null)
                return authData.expiry >= this.atCurrentAuthData.expiry;
            else
                return true;
        }
        else {
            return false;
        }
    }
    /**
     *
     * Construct Paths / Urls
     *
     * @return {?}
     */
    getUserPath() {
        if (this.atCurrentUserType == null)
            return '';
        else
            return this.atCurrentUserType.path + '/';
    }
    /**
     * @return {?}
     */
    getApiPath() {
        let /** @type {?} */ constructedPath = '';
        if (this.atOptions.apiBase != null)
            constructedPath += this.atOptions.apiBase + '/';
        if (this.atOptions.apiPath != null)
            constructedPath += this.atOptions.apiPath + '/';
        return constructedPath;
    }
    /**
     * @param {?} oAuthType
     * @return {?}
     */
    getOAuthPath(oAuthType) {
        let /** @type {?} */ oAuthPath;
        oAuthPath = this.atOptions.oAuthPaths[oAuthType];
        if (oAuthPath == null)
            oAuthPath = `/auth/${oAuthType}`;
        return oAuthPath;
    }
    /**
     * @param {?} oAuthPath
     * @param {?} callbackUrl
     * @param {?} windowType
     * @return {?}
     */
    getOAuthUrl(oAuthPath, callbackUrl, windowType) {
        let /** @type {?} */ url;
        url = `${this.atOptions.oAuthBase}/${oAuthPath}`;
        url += `?omniauth_window_type=${windowType}`;
        url += `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;
        if (this.atCurrentUserType != null)
            url += `&resource_class=${this.atCurrentUserType.name}`;
        return url;
    }
    /**
     *
     * OAuth
     *
     * @param {?} authWindow
     * @return {?}
     */
    requestCredentialsViaPostMessage(authWindow) {
        let /** @type {?} */ pollerObserv = interval(500);
        let /** @type {?} */ responseObserv = fromEvent(window, 'message').pipe(pluck('data'), filter(this.oAuthWindowResponseFilter));
        let /** @type {?} */ responseSubscription = responseObserv.subscribe(this.getAuthDataFromPostMessage.bind(this));
        let /** @type {?} */ pollerSubscription = pollerObserv.subscribe(() => {
            if (authWindow.closed)
                pollerSubscription.unsubscribe();
            else
                authWindow.postMessage('requestCredentials', '*');
        });
        return responseObserv;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    oAuthWindowResponseFilter(data) {
        if (data.message == 'deliverCredentials' || data.message == 'authFailure')
            return data;
    }
    /**
     *
     * Utilities
     *
     * @param {?} name
     * @return {?}
     */
    getUserTypeByName(name) {
        if (name == null || this.atOptions.userTypes == null)
            return null;
        return this.atOptions.userTypes.find(userType => userType.name === name);
    }
}
Angular2TokenService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Angular2TokenService.ctorParameters = () => [
    { type: Http },
    { type: ActivatedRoute, decorators: [{ type: Optional }] },
    { type: Router, decorators: [{ type: Optional }] }
];
function Angular2TokenService_tsickle_Closure_declarations() {
    /** @type {?} */
    Angular2TokenService.prototype.atOptions;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentUserType;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentAuthData;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentUserData;
    /** @type {?} */
    Angular2TokenService.prototype.http;
    /** @type {?} */
    Angular2TokenService.prototype.activatedRoute;
    /** @type {?} */
    Angular2TokenService.prototype.router;
}

//# sourceMappingURL=data:application/json;base64,
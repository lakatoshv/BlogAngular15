/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseField } from '../../../a2t-ui.forms';
export class A2tFormFieldComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        this._control = this.form.controls[this.question.key];
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this._control.valid;
    }
}
A2tFormFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'a2t-form-field',
                template: `
        <div class="a2t-input-group"
            [formGroup]="form">

            <label
                [attr.for]="question.key"
                *ngIf="_control.pristine">
                {{question.label}}
            </label>

            <label class="a2t-error"
                [attr.for]="question.key"
                *ngIf="_control.hasError('required') && !_control.pristine">
                {{question.label}} is required
            </label>

            <label class="a2t-error"
                [attr.for]="question.key"
                *ngIf="_control.hasError('minlength')">
                {{question.label}} is too short
            </label>

            <label class="a2t-error"
                [attr.for]="question.key"
                *ngIf="_control.hasError('maxlength')">
                {{question.label}} is too long
            </label>

            <label class="a2t-valid"
                [attr.for]="question.key"
                *ngIf="_control.valid && !_control.pristine">
                {{question.label}}
            </label>

            <input
                [formControlName]="question.key"
                [id]="question.key"
                [type]="question.type">
        </div>
    `,
                styles: [`
        .a2t-input-group {
            padding-bottom: 40px;
            padding-right: 20px;
            padding-left: 20px;
            font-family: "Segoe UI", "Helvetica Neue", Arial, sans-serif;
        }

        .a2t-input-group input {
            width: 100%;
            outline: none;
            border: none;
            background-color: #eee;
            line-height: 40px;

            padding-left: 10px;
            padding-right: 10px;
        }

        .a2t-input-group label {
            color: #666;
            font-weight: 600;
            font-size: 13px;
            margin-bottom: 0;
        }

        .a2t-error {
            color: #df6564 !important;
        }

        .a2t-valid {
            color: #72c380 !important;
        }
    `]
            },] },
];
A2tFormFieldComponent.propDecorators = {
    question: [{ type: Input }],
    form: [{ type: Input }]
};
function A2tFormFieldComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    A2tFormFieldComponent.prototype.question;
    /** @type {?} */
    A2tFormFieldComponent.prototype.form;
    /** @type {?} */
    A2tFormFieldComponent.prototype._control;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LWZvcm0tZmllbGQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXNoYXJlZC9hMnQtZm9ybS9hMnQtZm9ybS1maWVsZC9hMnQtZm9ybS1maWVsZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBZ0ZsRCxNQUFNOzs7O0lBT0YsUUFBUTtRQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN6RDs7OztJQUVELElBQUksT0FBTztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztLQUM5Qjs7O1lBM0ZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUksZ0JBQWdCO2dCQUM1QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXVDVDtnQkFDRCxNQUFNLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUNSLENBQUM7YUFDTDs7O3VCQUlJLEtBQUs7bUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEJhc2VGaWVsZCB9IGZyb20gJy4uLy4uLy4uL2EydC11aS5mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAgICdhMnQtZm9ybS1maWVsZCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImEydC1pbnB1dC1ncm91cFwiXG4gICAgICAgICAgICBbZm9ybUdyb3VwXT1cImZvcm1cIj5cblxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgW2F0dHIuZm9yXT1cInF1ZXN0aW9uLmtleVwiXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJfY29udHJvbC5wcmlzdGluZVwiPlxuICAgICAgICAgICAgICAgIHt7cXVlc3Rpb24ubGFiZWx9fVxuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYTJ0LWVycm9yXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5mb3JdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIl9jb250cm9sLmhhc0Vycm9yKCdyZXF1aXJlZCcpICYmICFfY29udHJvbC5wcmlzdGluZVwiPlxuICAgICAgICAgICAgICAgIHt7cXVlc3Rpb24ubGFiZWx9fSBpcyByZXF1aXJlZFxuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYTJ0LWVycm9yXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5mb3JdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIl9jb250cm9sLmhhc0Vycm9yKCdtaW5sZW5ndGgnKVwiPlxuICAgICAgICAgICAgICAgIHt7cXVlc3Rpb24ubGFiZWx9fSBpcyB0b28gc2hvcnRcbiAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImEydC1lcnJvclwiXG4gICAgICAgICAgICAgICAgW2F0dHIuZm9yXT1cInF1ZXN0aW9uLmtleVwiXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJfY29udHJvbC5oYXNFcnJvcignbWF4bGVuZ3RoJylcIj5cbiAgICAgICAgICAgICAgICB7e3F1ZXN0aW9uLmxhYmVsfX0gaXMgdG9vIGxvbmdcbiAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImEydC12YWxpZFwiXG4gICAgICAgICAgICAgICAgW2F0dHIuZm9yXT1cInF1ZXN0aW9uLmtleVwiXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJfY29udHJvbC52YWxpZCAmJiAhX2NvbnRyb2wucHJpc3RpbmVcIj5cbiAgICAgICAgICAgICAgICB7e3F1ZXN0aW9uLmxhYmVsfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICBbaWRdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICBbdHlwZV09XCJxdWVzdGlvbi50eXBlXCI+XG4gICAgICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc3R5bGVzOiBbYFxuICAgICAgICAuYTJ0LWlucHV0LWdyb3VwIHtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMjBweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIlNlZ29lIFVJXCIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgICAgIH1cblxuICAgICAgICAuYTJ0LWlucHV0LWdyb3VwIGlucHV0IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogNDBweDtcblxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hMnQtaW5wdXQtZ3JvdXAgbGFiZWwge1xuICAgICAgICAgICAgY29sb3I6ICM2NjY7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hMnQtZXJyb3Ige1xuICAgICAgICAgICAgY29sb3I6ICNkZjY1NjQgIWltcG9ydGFudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hMnQtdmFsaWQge1xuICAgICAgICAgICAgY29sb3I6ICM3MmMzODAgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgIGBdXG59KVxuXG5leHBvcnQgY2xhc3MgQTJ0Rm9ybUZpZWxkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIEBJbnB1dCgpIHF1ZXN0aW9uOiAgQmFzZUZpZWxkO1xuICAgIEBJbnB1dCgpIGZvcm06ICAgICAgRm9ybUdyb3VwO1xuXG4gICAgX2NvbnRyb2w6ICAgQWJzdHJhY3RDb250cm9sO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSB0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5xdWVzdGlvbi5rZXldO1xuICAgIH1cblxuICAgIGdldCBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbC52YWxpZDtcbiAgICB9XG59XG4iXX0=
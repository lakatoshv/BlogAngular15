/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { Angular2TokenService } from '../../angular2-token.service';
import { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';
import { SIGN_IN_FORM } from '../a2t-ui.forms';
export class A2tSignInComponent {
    /**
     * @param {?} _formService
     * @param {?} _sessionService
     * @param {?} _router
     */
    constructor(_formService, _sessionService, _router) {
        this._formService = _formService;
        this._sessionService = _sessionService;
        this._router = _router;
        this._formService.initForm(SIGN_IN_FORM);
        this._formService.submit$.subscribe((data) => this._sessionService.signIn(data).subscribe((res) => this._handleSuccess(res), (error) => this._handleError(error)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _handleSuccess(data) {
        this._errors = null;
        this._formService.unlockSubmit();
        this._router.navigate(['restricted']);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    _handleError(error) {
        this._errors = error.json().errors;
        this._formService.unlockSubmit();
    }
}
A2tSignInComponent.decorators = [
    { type: Component, args: [{
                selector: 'a2t-sign-in',
                providers: [A2tFormService],
                template: `
        <a2t-headline>Sign In</a2t-headline>
        <a2t-error [errors]="_errors"></a2t-error>
        <a2t-form>Sign In</a2t-form>
        <a2t-links case="sign-in"></a2t-links>
    `
            },] },
];
/** @nocollapse */
A2tSignInComponent.ctorParameters = () => [
    { type: A2tFormService },
    { type: Angular2TokenService },
    { type: Router }
];
function A2tSignInComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    A2tSignInComponent.prototype._errors;
    /** @type {?} */
    A2tSignInComponent.prototype._formService;
    /** @type {?} */
    A2tSignInComponent.prototype._sessionService;
    /** @type {?} */
    A2tSignInComponent.prototype._router;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LXNpZ24taW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXNpZ24taW4vYTJ0LXNpZ24taW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUdwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBWS9DLE1BQU07Ozs7OztJQUlGLFlBQ1csY0FDQSxpQkFDQTtRQUZBLGlCQUFZLEdBQVosWUFBWTtRQUNaLG9CQUFlLEdBQWYsZUFBZTtRQUNmLFlBQU8sR0FBUCxPQUFPO1FBRWQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUMvQixDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDN0QsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQ3hDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUMzQyxDQUNKLENBQUM7S0FDTDs7Ozs7SUFFTyxjQUFjLENBQUMsSUFBUztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzs7Ozs7O0lBR2xDLFlBQVksQ0FBQyxLQUFVO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDOzs7O1lBcEN4QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFJLGFBQWE7Z0JBQ3pCLFNBQVMsRUFBRyxDQUFDLGNBQWMsQ0FBQztnQkFDNUIsUUFBUSxFQUFFOzs7OztLQUtUO2FBQ0o7Ozs7WUFaUSxjQUFjO1lBSGQsb0JBQW9CO1lBRHBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQW5ndWxhcjJUb2tlblNlcnZpY2UgfSBmcm9tICcuLi8uLi9hbmd1bGFyMi10b2tlbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2lnbkluRGF0YSB9IGZyb20gJy4uLy4uL2FuZ3VsYXIyLXRva2VuLm1vZGVsJztcbmltcG9ydCB7IEEydEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vYTJ0LXNoYXJlZC9hMnQtZm9ybS9hMnQtZm9ybS5zZXJ2aWNlJztcbmltcG9ydCB7IFNJR05fSU5fRk9STSB9IGZyb20gJy4uL2EydC11aS5mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAgICdhMnQtc2lnbi1pbicsXG4gICAgcHJvdmlkZXJzOiAgW0EydEZvcm1TZXJ2aWNlXSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8YTJ0LWhlYWRsaW5lPlNpZ24gSW48L2EydC1oZWFkbGluZT5cbiAgICAgICAgPGEydC1lcnJvciBbZXJyb3JzXT1cIl9lcnJvcnNcIj48L2EydC1lcnJvcj5cbiAgICAgICAgPGEydC1mb3JtPlNpZ24gSW48L2EydC1mb3JtPlxuICAgICAgICA8YTJ0LWxpbmtzIGNhc2U9XCJzaWduLWluXCI+PC9hMnQtbGlua3M+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBBMnRTaWduSW5Db21wb25lbnQge1xuXG4gICAgX2Vycm9yczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIF9mb3JtU2VydmljZTogQTJ0Rm9ybVNlcnZpY2UsXG4gICAgICAgIHB1YmxpYyBfc2Vzc2lvblNlcnZpY2U6IEFuZ3VsYXIyVG9rZW5TZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgX3JvdXRlcjogUm91dGVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1TZXJ2aWNlLmluaXRGb3JtKFNJR05fSU5fRk9STSk7XG4gICAgICAgIHRoaXMuX2Zvcm1TZXJ2aWNlLnN1Ym1pdCQuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKGRhdGE6IFNpZ25JbkRhdGEpID0+IHRoaXMuX3Nlc3Npb25TZXJ2aWNlLnNpZ25JbihkYXRhKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlczogYW55KSA9PiAgIHRoaXMuX2hhbmRsZVN1Y2Nlc3MocmVzKSxcbiAgICAgICAgICAgICAgICAoZXJyb3I6IGFueSkgPT4gdGhpcy5faGFuZGxlRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaGFuZGxlU3VjY2VzcyhkYXRhOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9ybVNlcnZpY2UudW5sb2NrU3VibWl0KCk7XG4gICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJ3Jlc3RyaWN0ZWQnXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaGFuZGxlRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLl9lcnJvcnMgPSBlcnJvci5qc29uKCkuZXJyb3JzO1xuICAgICAgICB0aGlzLl9mb3JtU2VydmljZS51bmxvY2tTdWJtaXQoKTtcbiAgICB9XG59XG4iXX0=
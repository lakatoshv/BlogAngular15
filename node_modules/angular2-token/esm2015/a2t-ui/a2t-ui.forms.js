/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Validators } from '@angular/forms';
export class BaseField {
    /**
     * @param {?=} options
     */
    constructor(options = {}) {
        this.value = options.value;
        this.key = options.key || '';
        this.label = options.label || '';
        this.validators = options.validators === undefined ? [] : options.validators;
        this.type = options.type || '';
    }
}
function BaseField_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseField.prototype.value;
    /** @type {?} */
    BaseField.prototype.key;
    /** @type {?} */
    BaseField.prototype.label;
    /** @type {?} */
    BaseField.prototype.type;
    /** @type {?} */
    BaseField.prototype.validators;
}
export const /** @type {?} */ SIGN_IN_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export const /** @type {?} */ SIGN_UP_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordConfirmation',
        label: 'Password Confirmation',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export const /** @type {?} */ RESET_PASSWORD_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export const /** @type {?} */ UPDATE_PASSWORD_FORM = [
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordConfirmation',
        label: 'Password Confirmation',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordCurrent',
        label: 'Old Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LXVpLmZvcm1zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXVpLmZvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsTUFBTTs7OztJQU9GLFlBQVksVUFNUixFQUFFO1FBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDN0UsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztLQUNsQztDQUNKOzs7Ozs7Ozs7Ozs7O0FBRUQsTUFBTSxDQUFDLHVCQUFNLFlBQVksR0FBZ0I7SUFDckMsSUFBSSxTQUFTLENBQUM7UUFDVixHQUFHLEVBQUUsT0FBTztRQUNaLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLE1BQU07UUFDWixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7SUFDRixJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxVQUFVO1FBQ2YsS0FBSyxFQUFFLFVBQVU7UUFDakIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsVUFBVSxFQUFFO1lBQ1IsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDSixDQUFDO0NBQ0wsQ0FBQztBQUVGLE1BQU0sQ0FBQyx1QkFBTSxZQUFZLEdBQWdCO0lBQ3JDLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLE9BQU87UUFDWixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osVUFBVSxFQUFFO1lBQ1IsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDSixDQUFDO0lBQ0YsSUFBSSxTQUFTLENBQUM7UUFDVixHQUFHLEVBQUUsVUFBVTtRQUNmLEtBQUssRUFBRSxVQUFVO1FBQ2pCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztJQUNGLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLHNCQUFzQjtRQUMzQixLQUFLLEVBQUUsdUJBQXVCO1FBQzlCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztDQUNMLENBQUM7QUFFRixNQUFNLENBQUMsdUJBQU0sbUJBQW1CLEdBQWdCO0lBQzVDLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLE9BQU87UUFDWixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osVUFBVSxFQUFFO1lBQ1IsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDSixDQUFDO0NBQ0wsQ0FBQztBQUVGLE1BQU0sQ0FBQyx1QkFBTSxvQkFBb0IsR0FBZ0I7SUFDN0MsSUFBSSxTQUFTLENBQUM7UUFDVixHQUFHLEVBQUUsVUFBVTtRQUNmLEtBQUssRUFBRSxVQUFVO1FBQ2pCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztJQUNGLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLHNCQUFzQjtRQUMzQixLQUFLLEVBQUUsdUJBQXVCO1FBQzlCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztJQUNGLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLGlCQUFpQjtRQUN0QixLQUFLLEVBQUUsY0FBYztRQUNyQixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7Q0FDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGNsYXNzIEJhc2VGaWVsZHtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIGtleTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHZhbGlkYXRvcnM6IGFueVtdO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczoge1xuICAgICAgICB2YWx1ZT86IHN0cmluZyxcbiAgICAgICAga2V5Pzogc3RyaW5nLFxuICAgICAgICBsYWJlbD86IHN0cmluZyxcbiAgICAgICAgdHlwZT86IHN0cmluZyxcbiAgICAgICAgdmFsaWRhdG9ycz86IGFueVtdLFxuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICAgICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleSB8fCAnJztcbiAgICAgICAgdGhpcy5sYWJlbCA9IG9wdGlvbnMubGFiZWwgfHwgJyc7XG4gICAgICAgIHRoaXMudmFsaWRhdG9ycyA9IG9wdGlvbnMudmFsaWRhdG9ycyA9PT0gdW5kZWZpbmVkID8gW10gOiBvcHRpb25zLnZhbGlkYXRvcnM7XG4gICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnJztcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBTSUdOX0lOX0ZPUk06IEJhc2VGaWVsZFtdID0gW1xuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdlbWFpbCcsXG4gICAgICAgIGxhYmVsOiAnRW1haWwnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSksXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSlcbl07XG5cbmV4cG9ydCBjb25zdCBTSUdOX1VQX0ZPUk06IEJhc2VGaWVsZFtdID0gW1xuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdlbWFpbCcsXG4gICAgICAgIGxhYmVsOiAnRW1haWwnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSksXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSksXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkQ29uZmlybWF0aW9uJyxcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCBDb25maXJtYXRpb24nLFxuICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pXG5dO1xuXG5leHBvcnQgY29uc3QgUkVTRVRfUEFTU1dPUkRfRk9STTogQmFzZUZpZWxkW10gPSBbXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ2VtYWlsJyxcbiAgICAgICAgbGFiZWw6ICdFbWFpbCcsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdmFsaWRhdG9yczogW1xuICAgICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgICAgIFZhbGlkYXRvcnMubWluTGVuZ3RoKDgpXG4gICAgICAgIF1cbiAgICB9KVxuXTtcblxuZXhwb3J0IGNvbnN0IFVQREFURV9QQVNTV09SRF9GT1JNOiBCYXNlRmllbGRbXSA9IFtcbiAgICBuZXcgQmFzZUZpZWxkKHtcbiAgICAgICAga2V5OiAncGFzc3dvcmQnLFxuICAgICAgICBsYWJlbDogJ1Bhc3N3b3JkJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgdmFsaWRhdG9yczogW1xuICAgICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgICAgIFZhbGlkYXRvcnMubWluTGVuZ3RoKDgpXG4gICAgICAgIF1cbiAgICB9KSxcbiAgICBuZXcgQmFzZUZpZWxkKHtcbiAgICAgICAga2V5OiAncGFzc3dvcmRDb25maXJtYXRpb24nLFxuICAgICAgICBsYWJlbDogJ1Bhc3N3b3JkIENvbmZpcm1hdGlvbicsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSksXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkQ3VycmVudCcsXG4gICAgICAgIGxhYmVsOiAnT2xkIFBhc3N3b3JkJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgdmFsaWRhdG9yczogW1xuICAgICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgICAgIFZhbGlkYXRvcnMubWluTGVuZ3RoKDgpXG4gICAgICAgIF1cbiAgICB9KVxuXTsiXX0=
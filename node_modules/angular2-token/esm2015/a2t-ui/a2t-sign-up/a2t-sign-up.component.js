/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { Angular2TokenService } from '../../angular2-token.service';
import { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';
import { SIGN_UP_FORM } from '../a2t-ui.forms';
export class A2tSignUpComponent {
    /**
     * @param {?} _formService
     * @param {?} _sessionService
     * @param {?} _router
     */
    constructor(_formService, _sessionService, _router) {
        this._formService = _formService;
        this._sessionService = _sessionService;
        this._router = _router;
        this._formService.initForm(SIGN_UP_FORM);
        this._formService.submit$.subscribe((data) => this._sessionService.registerAccount(data).subscribe(res => this._handleSuccess(res), error => this._handleError(error)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _handleSuccess(data) {
        this._errors = null;
        this._formService.unlockSubmit();
        this._router.navigate(['restricted']);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    _handleError(error) {
        this._errors = error.json().errors.full_messages;
        this._formService.unlockSubmit();
    }
}
A2tSignUpComponent.decorators = [
    { type: Component, args: [{
                selector: 'a2t-sign-up',
                providers: [A2tFormService],
                template: `
        <a2t-headline>Sign Up</a2t-headline>
        <a2t-error [errors]="_errors"></a2t-error>
        <a2t-form>Sign Up</a2t-form>
        <a2t-links case="sign-up"></a2t-links>
    `
            },] },
];
/** @nocollapse */
A2tSignUpComponent.ctorParameters = () => [
    { type: A2tFormService },
    { type: Angular2TokenService },
    { type: Router }
];
function A2tSignUpComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    A2tSignUpComponent.prototype._errors;
    /** @type {?} */
    A2tSignUpComponent.prototype._formService;
    /** @type {?} */
    A2tSignUpComponent.prototype._sessionService;
    /** @type {?} */
    A2tSignUpComponent.prototype._router;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LXNpZ24tdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXNpZ24tdXAvYTJ0LXNpZ24tdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUdwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBWS9DLE1BQU07Ozs7OztJQUlGLFlBQ1csY0FDQSxpQkFDQTtRQUZBLGlCQUFZLEdBQVosWUFBWTtRQUNaLG9CQUFlLEdBQWYsZUFBZTtRQUNmLFlBQU8sR0FBUCxPQUFPO1FBRWQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUMvQixDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDeEUsR0FBRyxDQUFDLEVBQUUsQ0FBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUNwQyxLQUFLLENBQUMsRUFBRSxDQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQ3ZDLENBQ0osQ0FBQztLQUNMOzs7OztJQUVPLGNBQWMsQ0FBQyxJQUFTO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzs7Ozs7SUFHbEMsWUFBWSxDQUFDLEtBQVU7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDOzs7O1lBcEN4QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFRLGFBQWE7Z0JBQzdCLFNBQVMsRUFBTyxDQUFDLGNBQWMsQ0FBQztnQkFDaEMsUUFBUSxFQUFFOzs7OztLQUtUO2FBQ0o7Ozs7WUFaUSxjQUFjO1lBSGQsb0JBQW9CO1lBRHBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQW5ndWxhcjJUb2tlblNlcnZpY2UgfSBmcm9tICcuLi8uLi9hbmd1bGFyMi10b2tlbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUmVnaXN0ZXJEYXRhIH0gZnJvbSAnLi4vLi4vYW5ndWxhcjItdG9rZW4ubW9kZWwnO1xuaW1wb3J0IHsgQTJ0Rm9ybVNlcnZpY2UgfSBmcm9tICcuLi9hMnQtc2hhcmVkL2EydC1mb3JtL2EydC1mb3JtLnNlcnZpY2UnO1xuaW1wb3J0IHsgU0lHTl9VUF9GT1JNIH0gZnJvbSAnLi4vYTJ0LXVpLmZvcm1zJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICAgICAgICdhMnQtc2lnbi11cCcsXG4gICAgcHJvdmlkZXJzOiAgICAgIFtBMnRGb3JtU2VydmljZV0sXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGEydC1oZWFkbGluZT5TaWduIFVwPC9hMnQtaGVhZGxpbmU+XG4gICAgICAgIDxhMnQtZXJyb3IgW2Vycm9yc109XCJfZXJyb3JzXCI+PC9hMnQtZXJyb3I+XG4gICAgICAgIDxhMnQtZm9ybT5TaWduIFVwPC9hMnQtZm9ybT5cbiAgICAgICAgPGEydC1saW5rcyBjYXNlPVwic2lnbi11cFwiPjwvYTJ0LWxpbmtzPlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQTJ0U2lnblVwQ29tcG9uZW50IHtcblxuICAgIF9lcnJvcnM6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBfZm9ybVNlcnZpY2U6IEEydEZvcm1TZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgX3Nlc3Npb25TZXJ2aWNlOiBBbmd1bGFyMlRva2VuU2VydmljZSxcbiAgICAgICAgcHVibGljIF9yb3V0ZXI6IFJvdXRlclxuICAgICkge1xuICAgICAgICB0aGlzLl9mb3JtU2VydmljZS5pbml0Rm9ybShTSUdOX1VQX0ZPUk0pO1xuICAgICAgICB0aGlzLl9mb3JtU2VydmljZS5zdWJtaXQkLnN1YnNjcmliZShcbiAgICAgICAgICAgIChkYXRhOiBSZWdpc3RlckRhdGEpID0+IHRoaXMuX3Nlc3Npb25TZXJ2aWNlLnJlZ2lzdGVyQWNjb3VudChkYXRhKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgcmVzID0+ICAgICAgdGhpcy5faGFuZGxlU3VjY2VzcyhyZXMpLFxuICAgICAgICAgICAgICAgIGVycm9yID0+ICAgIHRoaXMuX2hhbmRsZUVycm9yKGVycm9yKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2hhbmRsZVN1Y2Nlc3MoZGF0YTogYW55KSB7XG4gICAgICAgIHRoaXMuX2Vycm9ycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Zvcm1TZXJ2aWNlLnVubG9ja1N1Ym1pdCgpO1xuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWydyZXN0cmljdGVkJ10pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2hhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JzID0gZXJyb3IuanNvbigpLmVycm9ycy5mdWxsX21lc3NhZ2VzO1xuICAgICAgICB0aGlzLl9mb3JtU2VydmljZS51bmxvY2tTdWJtaXQoKTtcbiAgICB9XG59XG4iXX0=
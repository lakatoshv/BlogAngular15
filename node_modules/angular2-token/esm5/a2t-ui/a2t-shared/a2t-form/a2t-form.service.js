/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
var A2tFormService = /** @class */ (function () {
    function A2tFormService() {
        this.submit$ = new EventEmitter();
        this.submitLock = false;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    A2tFormService.prototype.initForm = /**
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        this.fields = fields;
        this._createFormGroup();
    };
    /**
     * @return {?}
     */
    A2tFormService.prototype.submit = /**
     * @return {?}
     */
    function () {
        this.submitLock = true;
        this.submit$.emit(this.formGroup.value);
    };
    /**
     * @return {?}
     */
    A2tFormService.prototype.unlockSubmit = /**
     * @return {?}
     */
    function () {
        this.formGroup.reset();
        this.submitLock = false;
    };
    ;
    /**
     * @return {?}
     */
    A2tFormService.prototype._createFormGroup = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ group = {};
        this.fields.forEach(function (question) {
            group[question.key] = new FormControl(null, question.validators);
        });
        this.formGroup = new FormGroup(group);
    };
    A2tFormService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    A2tFormService.ctorParameters = function () { return []; };
    return A2tFormService;
}());
export { A2tFormService };
function A2tFormService_tsickle_Closure_declarations() {
    /** @type {?} */
    A2tFormService.prototype.submit$;
    /** @type {?} */
    A2tFormService.prototype.submitLock;
    /** @type {?} */
    A2tFormService.prototype.formGroup;
    /** @type {?} */
    A2tFormService.prototype.fields;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LWZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRva2VuLyIsInNvdXJjZXMiOlsiYTJ0LXVpL2EydC1zaGFyZWQvYTJ0LWZvcm0vYTJ0LWZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7SUFpQnBEO3VCQVBpQixJQUFJLFlBQVksRUFBTzswQkFDWCxLQUFLO0tBTWpCOzs7OztJQUVWLGlDQUFROzs7O2NBQUMsTUFBbUI7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Ozs7O0lBR3JCLCtCQUFNOzs7O1FBQ1QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7SUFHckMscUNBQVk7Ozs7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDOztJQUMzQixDQUFDOzs7O0lBRU0seUNBQWdCOzs7O1FBRXBCLHFCQUFJLEtBQUssR0FBUSxFQUFFLENBQUM7UUFFcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFRO1lBQ3hCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwRSxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Z0JBcEM3QyxVQUFVOzs7O3lCQVBYOztTQVFhLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcblxuaW1wb3J0IHsgU2lnbkluRGF0YSB9IGZyb20gJy4uLy4uLy4uL2FuZ3VsYXIyLXRva2VuLm1vZGVsJztcbmltcG9ydCB7IEJhc2VGaWVsZCB9IGZyb20gJy4uLy4uL2EydC11aS5mb3Jtcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBMnRGb3JtU2VydmljZSB7XG5cbiAgICAvLyBTdWJtaXQgRXZlbnRcbiAgICBwdWJsaWMgc3VibWl0JCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIHB1YmxpYyBzdWJtaXRMb2NrOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyBGb3JtIEJ1aWxkaW5nXG4gICAgcHVibGljIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuICAgIHB1YmxpYyBmaWVsZHM6IEJhc2VGaWVsZFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHB1YmxpYyBpbml0Rm9ybShmaWVsZHM6IEJhc2VGaWVsZFtdKSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0gZmllbGRzO1xuICAgICAgICB0aGlzLl9jcmVhdGVGb3JtR3JvdXAoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3VibWl0KCkge1xuICAgICAgICB0aGlzLnN1Ym1pdExvY2sgPSB0cnVlO1xuICAgICAgICB0aGlzLnN1Ym1pdCQuZW1pdCh0aGlzLmZvcm1Hcm91cC52YWx1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHVubG9ja1N1Ym1pdCgpIHtcbiAgICAgICAgdGhpcy5mb3JtR3JvdXAucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zdWJtaXRMb2NrID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHByaXZhdGUgX2NyZWF0ZUZvcm1Hcm91cCgpIHtcblxuICAgICAgICBsZXQgZ3JvdXA6IGFueSA9IHt9O1xuXG4gICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2gocXVlc3Rpb24gPT4ge1xuICAgICAgICAgICAgZ3JvdXBbcXVlc3Rpb24ua2V5XSA9IG5ldyBGb3JtQ29udHJvbChudWxsLCBxdWVzdGlvbi52YWxpZGF0b3JzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5mb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKGdyb3VwKTtcbiAgICB9XG59XG4iXX0=
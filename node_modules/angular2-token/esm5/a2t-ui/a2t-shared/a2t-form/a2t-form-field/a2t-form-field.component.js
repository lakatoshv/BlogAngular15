/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseField } from '../../../a2t-ui.forms';
var A2tFormFieldComponent = /** @class */ (function () {
    function A2tFormFieldComponent() {
    }
    /**
     * @return {?}
     */
    A2tFormFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._control = this.form.controls[this.question.key];
    };
    Object.defineProperty(A2tFormFieldComponent.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this._control.valid;
        },
        enumerable: true,
        configurable: true
    });
    A2tFormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'a2t-form-field',
                    template: "\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    ",
                    styles: ["\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    "]
                },] },
    ];
    A2tFormFieldComponent.propDecorators = {
        question: [{ type: Input }],
        form: [{ type: Input }]
    };
    return A2tFormFieldComponent;
}());
export { A2tFormFieldComponent };
function A2tFormFieldComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    A2tFormFieldComponent.prototype.question;
    /** @type {?} */
    A2tFormFieldComponent.prototype.form;
    /** @type {?} */
    A2tFormFieldComponent.prototype._control;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LWZvcm0tZmllbGQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXNoYXJlZC9hMnQtZm9ybS9hMnQtZm9ybS1maWVsZC9hMnQtZm9ybS1maWVsZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7Ozs7O0lBdUY5Qyx3Q0FBUTs7O0lBQVI7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekQ7SUFFRCxzQkFBSSwwQ0FBTzs7OztRQUFYO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1NBQzlCOzs7T0FBQTs7Z0JBM0ZKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUksZ0JBQWdCO29CQUM1QixRQUFRLEVBQUUsMHhDQXVDVDtvQkFDRCxNQUFNLEVBQUUsQ0FBQyx5eUJBaUNSLENBQUM7aUJBQ0w7OzsyQkFJSSxLQUFLO3VCQUNMLEtBQUs7O2dDQXRGVjs7U0FtRmEscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQmFzZUZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vYTJ0LXVpLmZvcm1zJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICAgJ2EydC1mb3JtLWZpZWxkJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTJ0LWlucHV0LWdyb3VwXCJcbiAgICAgICAgICAgIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxuXG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICBbYXR0ci5mb3JdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIl9jb250cm9sLnByaXN0aW5lXCI+XG4gICAgICAgICAgICAgICAge3txdWVzdGlvbi5sYWJlbH19XG4gICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhMnQtZXJyb3JcIlxuICAgICAgICAgICAgICAgIFthdHRyLmZvcl09XCJxdWVzdGlvbi5rZXlcIlxuICAgICAgICAgICAgICAgICpuZ0lmPVwiX2NvbnRyb2wuaGFzRXJyb3IoJ3JlcXVpcmVkJykgJiYgIV9jb250cm9sLnByaXN0aW5lXCI+XG4gICAgICAgICAgICAgICAge3txdWVzdGlvbi5sYWJlbH19IGlzIHJlcXVpcmVkXG4gICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhMnQtZXJyb3JcIlxuICAgICAgICAgICAgICAgIFthdHRyLmZvcl09XCJxdWVzdGlvbi5rZXlcIlxuICAgICAgICAgICAgICAgICpuZ0lmPVwiX2NvbnRyb2wuaGFzRXJyb3IoJ21pbmxlbmd0aCcpXCI+XG4gICAgICAgICAgICAgICAge3txdWVzdGlvbi5sYWJlbH19IGlzIHRvbyBzaG9ydFxuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYTJ0LWVycm9yXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5mb3JdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIl9jb250cm9sLmhhc0Vycm9yKCdtYXhsZW5ndGgnKVwiPlxuICAgICAgICAgICAgICAgIHt7cXVlc3Rpb24ubGFiZWx9fSBpcyB0b28gbG9uZ1xuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYTJ0LXZhbGlkXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5mb3JdPVwicXVlc3Rpb24ua2V5XCJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIl9jb250cm9sLnZhbGlkICYmICFfY29udHJvbC5wcmlzdGluZVwiPlxuICAgICAgICAgICAgICAgIHt7cXVlc3Rpb24ubGFiZWx9fVxuICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJxdWVzdGlvbi5rZXlcIlxuICAgICAgICAgICAgICAgIFtpZF09XCJxdWVzdGlvbi5rZXlcIlxuICAgICAgICAgICAgICAgIFt0eXBlXT1cInF1ZXN0aW9uLnR5cGVcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIC5hMnQtaW5wdXQtZ3JvdXAge1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiU2Vnb2UgVUlcIiwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hMnQtaW5wdXQtZ3JvdXAgaW5wdXQge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmEydC1pbnB1dC1ncm91cCBsYWJlbCB7XG4gICAgICAgICAgICBjb2xvcjogIzY2NjtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLmEydC1lcnJvciB7XG4gICAgICAgICAgICBjb2xvcjogI2RmNjU2NCAhaW1wb3J0YW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLmEydC12YWxpZCB7XG4gICAgICAgICAgICBjb2xvcjogIzcyYzM4MCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgYF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBBMnRGb3JtRmllbGRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQElucHV0KCkgcXVlc3Rpb246ICBCYXNlRmllbGQ7XG4gICAgQElucHV0KCkgZm9ybTogICAgICBGb3JtR3JvdXA7XG5cbiAgICBfY29udHJvbDogICBBYnN0cmFjdENvbnRyb2w7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IHRoaXMuZm9ybS5jb250cm9sc1t0aGlzLnF1ZXN0aW9uLmtleV07XG4gICAgfVxuXG4gICAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sLnZhbGlkO1xuICAgIH1cbn1cbiJdfQ==
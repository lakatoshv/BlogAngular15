/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Validators } from '@angular/forms';
var BaseField = /** @class */ (function () {
    function BaseField(options) {
        if (options === void 0) { options = {}; }
        this.value = options.value;
        this.key = options.key || '';
        this.label = options.label || '';
        this.validators = options.validators === undefined ? [] : options.validators;
        this.type = options.type || '';
    }
    return BaseField;
}());
export { BaseField };
function BaseField_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseField.prototype.value;
    /** @type {?} */
    BaseField.prototype.key;
    /** @type {?} */
    BaseField.prototype.label;
    /** @type {?} */
    BaseField.prototype.type;
    /** @type {?} */
    BaseField.prototype.validators;
}
export var /** @type {?} */ SIGN_IN_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export var /** @type {?} */ SIGN_UP_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordConfirmation',
        label: 'Password Confirmation',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export var /** @type {?} */ RESET_PASSWORD_FORM = [
    new BaseField({
        key: 'email',
        label: 'Email',
        type: 'text',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];
export var /** @type {?} */ UPDATE_PASSWORD_FORM = [
    new BaseField({
        key: 'password',
        label: 'Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordConfirmation',
        label: 'Password Confirmation',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    }),
    new BaseField({
        key: 'passwordCurrent',
        label: 'Old Password',
        type: 'password',
        validators: [
            Validators.required,
            Validators.minLength(8)
        ]
    })
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTJ0LXVpLmZvcm1zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItdG9rZW4vIiwic291cmNlcyI6WyJhMnQtdWkvYTJ0LXVpLmZvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsSUFBQTtJQU9JLG1CQUFZLE9BTU47UUFOTSx3QkFBQSxFQUFBLFlBTU47UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUM3RSxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0tBQ2xDO29CQXJCTDtJQXNCQyxDQUFBO0FBcEJELHFCQW9CQzs7Ozs7Ozs7Ozs7OztBQUVELE1BQU0sQ0FBQyxxQkFBTSxZQUFZLEdBQWdCO0lBQ3JDLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLE9BQU87UUFDWixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osVUFBVSxFQUFFO1lBQ1IsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDSixDQUFDO0lBQ0YsSUFBSSxTQUFTLENBQUM7UUFDVixHQUFHLEVBQUUsVUFBVTtRQUNmLEtBQUssRUFBRSxVQUFVO1FBQ2pCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztDQUNMLENBQUM7QUFFRixNQUFNLENBQUMscUJBQU0sWUFBWSxHQUFnQjtJQUNyQyxJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxPQUFPO1FBQ1osS0FBSyxFQUFFLE9BQU87UUFDZCxJQUFJLEVBQUUsTUFBTTtRQUNaLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztJQUNGLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLFVBQVU7UUFDZixLQUFLLEVBQUUsVUFBVTtRQUNqQixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7SUFDRixJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxzQkFBc0I7UUFDM0IsS0FBSyxFQUFFLHVCQUF1QjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7Q0FDTCxDQUFDO0FBRUYsTUFBTSxDQUFDLHFCQUFNLG1CQUFtQixHQUFnQjtJQUM1QyxJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxPQUFPO1FBQ1osS0FBSyxFQUFFLE9BQU87UUFDZCxJQUFJLEVBQUUsTUFBTTtRQUNaLFVBQVUsRUFBRTtZQUNSLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0osQ0FBQztDQUNMLENBQUM7QUFFRixNQUFNLENBQUMscUJBQU0sb0JBQW9CLEdBQWdCO0lBQzdDLElBQUksU0FBUyxDQUFDO1FBQ1YsR0FBRyxFQUFFLFVBQVU7UUFDZixLQUFLLEVBQUUsVUFBVTtRQUNqQixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7SUFDRixJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxzQkFBc0I7UUFDM0IsS0FBSyxFQUFFLHVCQUF1QjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUU7WUFDUixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMxQjtLQUNKLENBQUM7SUFDRixJQUFJLFNBQVMsQ0FBQztRQUNWLEdBQUcsRUFBRSxpQkFBaUI7UUFDdEIsS0FBSyxFQUFFLGNBQWM7UUFDckIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsVUFBVSxFQUFFO1lBQ1IsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDSixDQUFDO0NBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBjbGFzcyBCYXNlRmllbGR7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBrZXk6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICB2YWxpZGF0b3JzOiBhbnlbXTtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHtcbiAgICAgICAgdmFsdWU/OiBzdHJpbmcsXG4gICAgICAgIGtleT86IHN0cmluZyxcbiAgICAgICAgbGFiZWw/OiBzdHJpbmcsXG4gICAgICAgIHR5cGU/OiBzdHJpbmcsXG4gICAgICAgIHZhbGlkYXRvcnM/OiBhbnlbXSxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXkgfHwgJyc7XG4gICAgICAgIHRoaXMubGFiZWwgPSBvcHRpb25zLmxhYmVsIHx8ICcnO1xuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSBvcHRpb25zLnZhbGlkYXRvcnMgPT09IHVuZGVmaW5lZCA/IFtdIDogb3B0aW9ucy52YWxpZGF0b3JzO1xuICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGUgfHwgJyc7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgU0lHTl9JTl9GT1JNOiBCYXNlRmllbGRbXSA9IFtcbiAgICBuZXcgQmFzZUZpZWxkKHtcbiAgICAgICAga2V5OiAnZW1haWwnLFxuICAgICAgICBsYWJlbDogJ0VtYWlsJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdwYXNzd29yZCcsXG4gICAgICAgIGxhYmVsOiAnUGFzc3dvcmQnLFxuICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pXG5dO1xuXG5leHBvcnQgY29uc3QgU0lHTl9VUF9GT1JNOiBCYXNlRmllbGRbXSA9IFtcbiAgICBuZXcgQmFzZUZpZWxkKHtcbiAgICAgICAga2V5OiAnZW1haWwnLFxuICAgICAgICBsYWJlbDogJ0VtYWlsJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdwYXNzd29yZCcsXG4gICAgICAgIGxhYmVsOiAnUGFzc3dvcmQnLFxuICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdwYXNzd29yZENvbmZpcm1hdGlvbicsXG4gICAgICAgIGxhYmVsOiAnUGFzc3dvcmQgQ29uZmlybWF0aW9uJyxcbiAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgdmFsaWRhdG9yczogW1xuICAgICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgICAgIFZhbGlkYXRvcnMubWluTGVuZ3RoKDgpXG4gICAgICAgIF1cbiAgICB9KVxuXTtcblxuZXhwb3J0IGNvbnN0IFJFU0VUX1BBU1NXT1JEX0ZPUk06IEJhc2VGaWVsZFtdID0gW1xuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdlbWFpbCcsXG4gICAgICAgIGxhYmVsOiAnRW1haWwnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSlcbl07XG5cbmV4cG9ydCBjb25zdCBVUERBVEVfUEFTU1dPUkRfRk9STTogQmFzZUZpZWxkW10gPSBbXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSksXG4gICAgbmV3IEJhc2VGaWVsZCh7XG4gICAgICAgIGtleTogJ3Bhc3N3b3JkQ29uZmlybWF0aW9uJyxcbiAgICAgICAgbGFiZWw6ICdQYXNzd29yZCBDb25maXJtYXRpb24nLFxuICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGgoOClcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIG5ldyBCYXNlRmllbGQoe1xuICAgICAgICBrZXk6ICdwYXNzd29yZEN1cnJlbnQnLFxuICAgICAgICBsYWJlbDogJ09sZCBQYXNzd29yZCcsXG4gICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCg4KVxuICAgICAgICBdXG4gICAgfSlcbl07Il19
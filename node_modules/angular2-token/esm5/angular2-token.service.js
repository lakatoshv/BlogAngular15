/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Http, Headers, Request, RequestMethod, RequestOptions } from '@angular/http';
import { interval, fromEvent } from 'rxjs';
import { share, pluck, filter } from 'rxjs/operators';
var Angular2TokenService = /** @class */ (function () {
    function Angular2TokenService(http, activatedRoute, router) {
        this.http = http;
        this.activatedRoute = activatedRoute;
        this.router = router;
    }
    Object.defineProperty(Angular2TokenService.prototype, "currentUserType", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.atCurrentUserType != null)
                return this.atCurrentUserType.name;
            else
                return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Angular2TokenService.prototype, "currentUserData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.atCurrentUserData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Angular2TokenService.prototype, "currentAuthData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.atCurrentAuthData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Angular2TokenService.prototype, "currentAuthHeaders", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.atCurrentAuthData != null) {
                return new Headers({
                    'access-token': this.atCurrentAuthData.accessToken,
                    'client': this.atCurrentAuthData.client,
                    'expiry': this.atCurrentAuthData.expiry,
                    'token-type': this.atCurrentAuthData.tokenType,
                    'uid': this.atCurrentAuthData.uid
                });
            }
            return new Headers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.userSignedIn = /**
     * @return {?}
     */
    function () {
        return !!this.atCurrentAuthData;
    };
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        if (this.userSignedIn())
            return true;
        else {
            // Store current location in storage (usefull for redirection after signing in)
            if (this.atOptions.signInStoredUrlStorageKey) {
                localStorage.setItem(this.atOptions.signInStoredUrlStorageKey, window.location.pathname + window.location.search);
            }
            // Redirect user to sign in if signInRedirect is set
            if (this.router && this.atOptions.signInRedirect)
                this.router.navigate([this.atOptions.signInRedirect]);
            return false;
        }
    };
    // Inital configuration
    /**
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.init = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var /** @type {?} */ defaultOptions = {
            apiPath: null,
            apiBase: null,
            signInPath: 'auth/sign_in',
            signInRedirect: null,
            signInStoredUrlStorageKey: null,
            signOutPath: 'auth/sign_out',
            validateTokenPath: 'auth/validate_token',
            signOutFailedValidate: false,
            registerAccountPath: 'auth',
            deleteAccountPath: 'auth',
            registerAccountCallback: window.location.href,
            updatePasswordPath: 'auth',
            resetPasswordPath: 'auth/password',
            resetPasswordCallback: window.location.href,
            userTypes: null,
            oAuthBase: window.location.origin,
            oAuthPaths: {
                github: 'auth/github'
            },
            oAuthCallbackPath: 'oauth_callback',
            oAuthWindowType: 'newWindow',
            oAuthWindowOptions: null,
            globalOptions: {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            }
        };
        this.atOptions = (/** @type {?} */ (Object)).assign(defaultOptions, options);
        this.tryLoadAuthData();
    };
    /**
     *
     * Actions
     *
     */
    // Register request
    /**
     *
     * Actions
     *
     * @param {?} registerData
     * @return {?}
     */
    Angular2TokenService.prototype.registerAccount = /**
     *
     * Actions
     *
     * @param {?} registerData
     * @return {?}
     */
    function (registerData) {
        if (registerData.userType == null)
            this.atCurrentUserType = null;
        else {
            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);
            delete registerData.userType;
        }
        if (registerData["password_confirmation"] == null &&
            registerData.passwordConfirmation != null) {
            registerData["password_confirmation"] = registerData.passwordConfirmation;
            delete registerData.passwordConfirmation;
        }
        registerData["confirm_success_url"] = this.atOptions.registerAccountCallback;
        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));
    };
    // Delete Account
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.deleteAccount = /**
     * @return {?}
     */
    function () {
        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);
    };
    // Sign in request and set storage
    /**
     * @param {?} signInData
     * @return {?}
     */
    Angular2TokenService.prototype.signIn = /**
     * @param {?} signInData
     * @return {?}
     */
    function (signInData) {
        var _this = this;
        if (signInData.userType == null)
            this.atCurrentUserType = null;
        else
            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);
        var /** @type {?} */ body = JSON.stringify({
            email: signInData.email,
            password: signInData.password
        });
        var /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);
        observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (_error) { return null; });
        return observ;
    };
    /**
     * @param {?} oAuthType
     * @return {?}
     */
    Angular2TokenService.prototype.signInOAuth = /**
     * @param {?} oAuthType
     * @return {?}
     */
    function (oAuthType) {
        var /** @type {?} */ oAuthPath = this.getOAuthPath(oAuthType);
        var /** @type {?} */ callbackUrl = window.location.origin + "/" + this.atOptions.oAuthCallbackPath;
        var /** @type {?} */ oAuthWindowType = this.atOptions.oAuthWindowType;
        var /** @type {?} */ authUrl = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);
        if (oAuthWindowType == 'newWindow') {
            var /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;
            var /** @type {?} */ windowOptions = '';
            if (oAuthWindowOptions) {
                for (var /** @type {?} */ key in oAuthWindowOptions) {
                    windowOptions += "," + key + "=" + oAuthWindowOptions[key];
                }
            }
            var /** @type {?} */ popup = window.open(authUrl, '_blank', "closebuttoncaption=Cancel" + windowOptions);
            return this.requestCredentialsViaPostMessage(popup);
        }
        else if (oAuthWindowType == 'sameWindow') {
            window.location.href = authUrl;
        }
        else {
            throw "Unsupported oAuthWindowType \"" + oAuthWindowType + "\"";
        }
    };
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.processOAuthCallback = /**
     * @return {?}
     */
    function () {
        this.getAuthDataFromParams();
    };
    // Sign out request and delete storage
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.signOut = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);
        localStorage.removeItem('accessToken');
        localStorage.removeItem('client');
        localStorage.removeItem('expiry');
        localStorage.removeItem('tokenType');
        localStorage.removeItem('uid');
        this.atCurrentAuthData = null;
        this.atCurrentUserType = null;
        this.atCurrentUserData = null;
        return observ;
    };
    // Validate token request
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.validateToken = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);
        observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (error) {
            if (error.status === 401 && _this.atOptions.signOutFailedValidate) {
                _this.signOut();
            }
        });
        return observ;
    };
    // Update password request
    /**
     * @param {?} updatePasswordData
     * @return {?}
     */
    Angular2TokenService.prototype.updatePassword = /**
     * @param {?} updatePasswordData
     * @return {?}
     */
    function (updatePasswordData) {
        if (updatePasswordData.userType != null)
            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);
        var /** @type {?} */ args;
        if (updatePasswordData.passwordCurrent == null) {
            args = {
                password: updatePasswordData.password,
                password_confirmation: updatePasswordData.passwordConfirmation
            };
        }
        else {
            args = {
                current_password: updatePasswordData.passwordCurrent,
                password: updatePasswordData.password,
                password_confirmation: updatePasswordData.passwordConfirmation
            };
        }
        if (updatePasswordData.resetPasswordToken) {
            args.reset_password_token = updatePasswordData.resetPasswordToken;
        }
        var /** @type {?} */ body = JSON.stringify(args);
        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);
    };
    // Reset password request
    /**
     * @param {?} resetPasswordData
     * @return {?}
     */
    Angular2TokenService.prototype.resetPassword = /**
     * @param {?} resetPasswordData
     * @return {?}
     */
    function (resetPasswordData) {
        if (resetPasswordData.userType == null)
            this.atCurrentUserType = null;
        else
            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);
        var /** @type {?} */ body = JSON.stringify({
            email: resetPasswordData.email,
            redirect_url: this.atOptions.resetPasswordCallback
        });
        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);
    };
    /**
     *
     * HTTP Wrappers
     *
     */
    /**
     *
     * HTTP Wrappers
     *
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.get = /**
     *
     * HTTP Wrappers
     *
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Get
        }, options));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.post = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Post,
            body: body
        }, options));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.put = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Put,
            body: body
        }, options));
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.delete = /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Delete
        }, options));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.patch = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Patch,
            body: body
        }, options));
    };
    /**
     * @param {?} path
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.head = /**
     * @param {?} path
     * @param {?=} options
     * @return {?}
     */
    function (path, options) {
        return this.request({
            method: RequestMethod.Head,
            url: this.getApiPath() + path
        });
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Angular2TokenService.prototype.options = /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        return this.request(this.mergeRequestOptionsArgs({
            url: this.getApiPath() + url,
            method: RequestMethod.Options
        }, options));
    };
    // Construct and send Http request
    /**
     * @param {?} options
     * @return {?}
     */
    Angular2TokenService.prototype.request = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var /** @type {?} */ baseRequestOptions;
        var /** @type {?} */ baseHeaders = this.atOptions.globalOptions.headers;
        // Get auth data from local storage
        this.getAuthDataFromStorage();
        // Merge auth headers to request if set
        if (this.atCurrentAuthData != null) {
            (/** @type {?} */ (Object)).assign(baseHeaders, {
                'access-token': this.atCurrentAuthData.accessToken,
                'client': this.atCurrentAuthData.client,
                'expiry': this.atCurrentAuthData.expiry,
                'token-type': this.atCurrentAuthData.tokenType,
                'uid': this.atCurrentAuthData.uid
            });
        }
        baseRequestOptions = new RequestOptions({
            headers: new Headers(baseHeaders)
        });
        // Merge standard and custom RequestOptions
        baseRequestOptions = baseRequestOptions.merge(options);
        var /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).pipe(share());
        this.handleResponse(response);
        return response;
    };
    /**
     * @param {?} options
     * @param {?=} addOptions
     * @return {?}
     */
    Angular2TokenService.prototype.mergeRequestOptionsArgs = /**
     * @param {?} options
     * @param {?=} addOptions
     * @return {?}
     */
    function (options, addOptions) {
        var /** @type {?} */ returnOptions = options;
        if (options)
            (/** @type {?} */ (Object)).assign(returnOptions, addOptions);
        return returnOptions;
    };
    /**
     * @param {?} response
     * @return {?}
     */
    Angular2TokenService.prototype.handleResponse = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        response.subscribe(function (res) {
            _this.getAuthHeadersFromResponse(/** @type {?} */ (res));
        }, function (error) {
            _this.getAuthHeadersFromResponse(/** @type {?} */ (error));
        });
    };
    /**
     *
     * Get Auth Data
     *
     * @return {?}
     */
    Angular2TokenService.prototype.tryLoadAuthData = /**
     *
     * Get Auth Data
     *
     * @return {?}
     */
    function () {
        var /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));
        if (userType)
            this.atCurrentUserType = userType;
        this.getAuthDataFromStorage();
        if (this.activatedRoute)
            this.getAuthDataFromParams();
        if (this.atCurrentAuthData)
            this.validateToken();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Angular2TokenService.prototype.getAuthHeadersFromResponse = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var /** @type {?} */ headers = data.headers;
        var /** @type {?} */ authData = {
            accessToken: headers.get('access-token'),
            client: headers.get('client'),
            expiry: headers.get('expiry'),
            tokenType: headers.get('token-type'),
            uid: headers.get('uid')
        };
        this.setAuthData(authData);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Angular2TokenService.prototype.getAuthDataFromPostMessage = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var /** @type {?} */ authData = {
            accessToken: data['auth_token'],
            client: data['client_id'],
            expiry: data['expiry'],
            tokenType: 'Bearer',
            uid: data['uid']
        };
        this.setAuthData(authData);
    };
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.getAuthDataFromStorage = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ authData = {
            accessToken: localStorage.getItem('accessToken'),
            client: localStorage.getItem('client'),
            expiry: localStorage.getItem('expiry'),
            tokenType: localStorage.getItem('tokenType'),
            uid: localStorage.getItem('uid')
        };
        if (this.checkAuthData(authData))
            this.atCurrentAuthData = authData;
    };
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.getAuthDataFromParams = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.activatedRoute.queryParams)
            // Fix for Testing, needs to be removed later
            this.activatedRoute.queryParams.subscribe(function (queryParams) {
                var /** @type {?} */ authData = {
                    accessToken: queryParams['token'] || queryParams['auth_token'],
                    client: queryParams['client_id'],
                    expiry: queryParams['expiry'],
                    tokenType: 'Bearer',
                    uid: queryParams['uid']
                };
                if (_this.checkAuthData(authData))
                    _this.atCurrentAuthData = authData;
            });
    };
    /**
     *
     * Set Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    Angular2TokenService.prototype.setAuthData = /**
     *
     * Set Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    function (authData) {
        if (this.checkAuthData(authData)) {
            this.atCurrentAuthData = authData;
            localStorage.setItem('accessToken', authData.accessToken);
            localStorage.setItem('client', authData.client);
            localStorage.setItem('expiry', authData.expiry);
            localStorage.setItem('tokenType', authData.tokenType);
            localStorage.setItem('uid', authData.uid);
            if (this.atCurrentUserType != null)
                localStorage.setItem('userType', this.atCurrentUserType.name);
        }
    };
    /**
     *
     * Validate Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    Angular2TokenService.prototype.checkAuthData = /**
     *
     * Validate Auth Data
     *
     * @param {?} authData
     * @return {?}
     */
    function (authData) {
        if (authData.accessToken != null &&
            authData.client != null &&
            authData.expiry != null &&
            authData.tokenType != null &&
            authData.uid != null) {
            if (this.atCurrentAuthData != null)
                return authData.expiry >= this.atCurrentAuthData.expiry;
            else
                return true;
        }
        else {
            return false;
        }
    };
    /**
     *
     * Construct Paths / Urls
     *
     * @return {?}
     */
    Angular2TokenService.prototype.getUserPath = /**
     *
     * Construct Paths / Urls
     *
     * @return {?}
     */
    function () {
        if (this.atCurrentUserType == null)
            return '';
        else
            return this.atCurrentUserType.path + '/';
    };
    /**
     * @return {?}
     */
    Angular2TokenService.prototype.getApiPath = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ constructedPath = '';
        if (this.atOptions.apiBase != null)
            constructedPath += this.atOptions.apiBase + '/';
        if (this.atOptions.apiPath != null)
            constructedPath += this.atOptions.apiPath + '/';
        return constructedPath;
    };
    /**
     * @param {?} oAuthType
     * @return {?}
     */
    Angular2TokenService.prototype.getOAuthPath = /**
     * @param {?} oAuthType
     * @return {?}
     */
    function (oAuthType) {
        var /** @type {?} */ oAuthPath;
        oAuthPath = this.atOptions.oAuthPaths[oAuthType];
        if (oAuthPath == null)
            oAuthPath = "/auth/" + oAuthType;
        return oAuthPath;
    };
    /**
     * @param {?} oAuthPath
     * @param {?} callbackUrl
     * @param {?} windowType
     * @return {?}
     */
    Angular2TokenService.prototype.getOAuthUrl = /**
     * @param {?} oAuthPath
     * @param {?} callbackUrl
     * @param {?} windowType
     * @return {?}
     */
    function (oAuthPath, callbackUrl, windowType) {
        var /** @type {?} */ url;
        url = this.atOptions.oAuthBase + "/" + oAuthPath;
        url += "?omniauth_window_type=" + windowType;
        url += "&auth_origin_url=" + encodeURIComponent(callbackUrl);
        if (this.atCurrentUserType != null)
            url += "&resource_class=" + this.atCurrentUserType.name;
        return url;
    };
    /**
     *
     * OAuth
     *
     * @param {?} authWindow
     * @return {?}
     */
    Angular2TokenService.prototype.requestCredentialsViaPostMessage = /**
     *
     * OAuth
     *
     * @param {?} authWindow
     * @return {?}
     */
    function (authWindow) {
        var /** @type {?} */ pollerObserv = interval(500);
        var /** @type {?} */ responseObserv = fromEvent(window, 'message').pipe(pluck('data'), filter(this.oAuthWindowResponseFilter));
        var /** @type {?} */ responseSubscription = responseObserv.subscribe(this.getAuthDataFromPostMessage.bind(this));
        var /** @type {?} */ pollerSubscription = pollerObserv.subscribe(function () {
            if (authWindow.closed)
                pollerSubscription.unsubscribe();
            else
                authWindow.postMessage('requestCredentials', '*');
        });
        return responseObserv;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Angular2TokenService.prototype.oAuthWindowResponseFilter = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.message == 'deliverCredentials' || data.message == 'authFailure')
            return data;
    };
    /**
     *
     * Utilities
     *
     * @param {?} name
     * @return {?}
     */
    Angular2TokenService.prototype.getUserTypeByName = /**
     *
     * Utilities
     *
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (name == null || this.atOptions.userTypes == null)
            return null;
        return this.atOptions.userTypes.find(function (userType) { return userType.name === name; });
    };
    Angular2TokenService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Angular2TokenService.ctorParameters = function () { return [
        { type: Http },
        { type: ActivatedRoute, decorators: [{ type: Optional }] },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    return Angular2TokenService;
}());
export { Angular2TokenService };
function Angular2TokenService_tsickle_Closure_declarations() {
    /** @type {?} */
    Angular2TokenService.prototype.atOptions;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentUserType;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentAuthData;
    /** @type {?} */
    Angular2TokenService.prototype.atCurrentUserData;
    /** @type {?} */
    Angular2TokenService.prototype.http;
    /** @type {?} */
    Angular2TokenService.prototype.activatedRoute;
    /** @type {?} */
    Angular2TokenService.prototype.router;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItdG9rZW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXRva2VuLyIsInNvdXJjZXMiOlsiYW5ndWxhcjItdG9rZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQWUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQ0gsSUFBSSxFQUVKLE9BQU8sRUFDUCxPQUFPLEVBQ1AsYUFBYSxFQUNiLGNBQWMsRUFFakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFjLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBb0RsRCw4QkFDWSxNQUNZLGNBQThCLEVBQzlCLE1BQWM7UUFGMUIsU0FBSSxHQUFKLElBQUk7UUFDUSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtLQUNqQztJQXRDTCxzQkFBSSxpREFBZTs7OztRQUFuQjtZQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLElBQUk7Z0JBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNuQjs7O09BQUE7SUFFRCxzQkFBSSxpREFBZTs7OztRQUFuQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDakM7OztPQUFBO0lBRUQsc0JBQUksaURBQWU7Ozs7UUFBbkI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQ2pDOzs7T0FBQTtJQUVE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N0MsQ0FBQztRQUVGLHFCQUFJLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7WUFDNUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztnQkFDbEIsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckMsSUFBSTtnQkFDQSxVQUFVLENBQUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3pELENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxjQUFjLENBQUM7Ozs7OztJQUdsQix3REFBeUI7Ozs7Y0FBQyxJQUFTO1FBQ3ZDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksb0JBQW9CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUM7WUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7O0lBVVosZ0RBQWlCOzs7Ozs7O2NBQUMsSUFBWTtRQUNsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQztZQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBRWhCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2hDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQXRCLENBQXNCLENBQ3JDLENBQUM7OztnQkF6bUJULFVBQVU7Ozs7Z0JBekJQLElBQUk7Z0JBRkMsY0FBYyx1QkFrRWQsUUFBUTtnQkFsRVEsTUFBTSx1QkFtRXRCLFFBQVE7OytCQXBFakI7O1NBNkJhLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1xuICAgIEh0dHAsXG4gICAgUmVzcG9uc2UsXG4gICAgSGVhZGVycyxcbiAgICBSZXF1ZXN0LFxuICAgIFJlcXVlc3RNZXRob2QsXG4gICAgUmVxdWVzdE9wdGlvbnMsXG4gICAgUmVxdWVzdE9wdGlvbnNBcmdzXG59IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBpbnRlcnZhbCwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZSwgcGx1Y2ssIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgICBTaWduSW5EYXRhLFxuICAgIFJlZ2lzdGVyRGF0YSxcbiAgICBVcGRhdGVQYXNzd29yZERhdGEsXG4gICAgUmVzZXRQYXNzd29yZERhdGEsXG5cbiAgICBVc2VyVHlwZSxcbiAgICBVc2VyRGF0YSxcbiAgICBBdXRoRGF0YSxcblxuICAgIEFuZ3VsYXIyVG9rZW5PcHRpb25zXG59IGZyb20gJy4vYW5ndWxhcjItdG9rZW4ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5ndWxhcjJUb2tlblNlcnZpY2UgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG5cbiAgICBnZXQgY3VycmVudFVzZXJUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmF0Q3VycmVudFVzZXJUeXBlICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdEN1cnJlbnRVc2VyVHlwZS5uYW1lO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFVzZXJEYXRhKCk6IFVzZXJEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXRDdXJyZW50VXNlckRhdGE7XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRBdXRoRGF0YSgpOiBBdXRoRGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0Q3VycmVudEF1dGhEYXRhO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50QXV0aEhlYWRlcnMoKTogSGVhZGVycyB7XG4gICAgICAgIGlmICh0aGlzLmF0Q3VycmVudEF1dGhEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgICAgICAgJ2FjY2Vzcy10b2tlbic6IHRoaXMuYXRDdXJyZW50QXV0aERhdGEuYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgICAgJ2NsaWVudCc6ICAgICAgIHRoaXMuYXRDdXJyZW50QXV0aERhdGEuY2xpZW50LFxuICAgICAgICAgICAgICAgICdleHBpcnknOiAgICAgICB0aGlzLmF0Q3VycmVudEF1dGhEYXRhLmV4cGlyeSxcbiAgICAgICAgICAgICAgICAndG9rZW4tdHlwZSc6ICAgdGhpcy5hdEN1cnJlbnRBdXRoRGF0YS50b2tlblR5cGUsXG4gICAgICAgICAgICAgICAgJ3VpZCc6ICAgICAgICAgIHRoaXMuYXRDdXJyZW50QXV0aERhdGEudWlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgSGVhZGVycztcbiAgICB9XG5cbiAgICBwcml2YXRlIGF0T3B0aW9uczogQW5ndWxhcjJUb2tlbk9wdGlvbnM7XG4gICAgcHJpdmF0ZSBhdEN1cnJlbnRVc2VyVHlwZTogVXNlclR5cGU7XG4gICAgcHJpdmF0ZSBhdEN1cnJlbnRBdXRoRGF0YTogQXV0aERhdGE7XG4gICAgcHJpdmF0ZSBhdEN1cnJlbnRVc2VyRGF0YTogVXNlckRhdGE7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICAgICkgeyB9XG5cbiAgICB1c2VyU2lnbmVkSW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYXRDdXJyZW50QXV0aERhdGE7XG4gICAgfVxuXG4gICAgY2FuQWN0aXZhdGUoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnVzZXJTaWduZWRJbigpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gU3RvcmUgY3VycmVudCBsb2NhdGlvbiBpbiBzdG9yYWdlICh1c2VmdWxsIGZvciByZWRpcmVjdGlvbiBhZnRlciBzaWduaW5nIGluKVxuICAgICAgICAgICAgaWYgKHRoaXMuYXRPcHRpb25zLnNpZ25JblN0b3JlZFVybFN0b3JhZ2VLZXkpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdE9wdGlvbnMuc2lnbkluU3RvcmVkVXJsU3RvcmFnZUtleSxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlZGlyZWN0IHVzZXIgdG8gc2lnbiBpbiBpZiBzaWduSW5SZWRpcmVjdCBpcyBzZXRcbiAgICAgICAgICAgIGlmKHRoaXMucm91dGVyICYmIHRoaXMuYXRPcHRpb25zLnNpZ25JblJlZGlyZWN0KVxuICAgICAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFt0aGlzLmF0T3B0aW9ucy5zaWduSW5SZWRpcmVjdF0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbml0YWwgY29uZmlndXJhdGlvblxuICAgIGluaXQob3B0aW9ucz86IEFuZ3VsYXIyVG9rZW5PcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IGRlZmF1bHRPcHRpb25zOiBBbmd1bGFyMlRva2VuT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFwaVBhdGg6ICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgYXBpQmFzZTogICAgICAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAgICAgICAgIHNpZ25JblBhdGg6ICAgICAgICAgICAgICAgICAnYXV0aC9zaWduX2luJyxcbiAgICAgICAgICAgIHNpZ25JblJlZGlyZWN0OiAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgc2lnbkluU3RvcmVkVXJsU3RvcmFnZUtleTogIG51bGwsXG5cbiAgICAgICAgICAgIHNpZ25PdXRQYXRoOiAgICAgICAgICAgICAgICAnYXV0aC9zaWduX291dCcsXG4gICAgICAgICAgICB2YWxpZGF0ZVRva2VuUGF0aDogICAgICAgICAgJ2F1dGgvdmFsaWRhdGVfdG9rZW4nLFxuICAgICAgICAgICAgc2lnbk91dEZhaWxlZFZhbGlkYXRlOiAgICAgIGZhbHNlLFxuXG4gICAgICAgICAgICByZWdpc3RlckFjY291bnRQYXRoOiAgICAgICAgJ2F1dGgnLFxuICAgICAgICAgICAgZGVsZXRlQWNjb3VudFBhdGg6ICAgICAgICAgICdhdXRoJyxcbiAgICAgICAgICAgIHJlZ2lzdGVyQWNjb3VudENhbGxiYWNrOiAgICB3aW5kb3cubG9jYXRpb24uaHJlZixcblxuICAgICAgICAgICAgdXBkYXRlUGFzc3dvcmRQYXRoOiAgICAgICAgICdhdXRoJyxcblxuICAgICAgICAgICAgcmVzZXRQYXNzd29yZFBhdGg6ICAgICAgICAgICdhdXRoL3Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHJlc2V0UGFzc3dvcmRDYWxsYmFjazogICAgICB3aW5kb3cubG9jYXRpb24uaHJlZixcblxuICAgICAgICAgICAgdXNlclR5cGVzOiAgICAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAgICAgICAgIG9BdXRoQmFzZTogICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgb0F1dGhQYXRoczoge1xuICAgICAgICAgICAgICAgIGdpdGh1YjogICAgICAgICAgICAgICAgICdhdXRoL2dpdGh1YidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvQXV0aENhbGxiYWNrUGF0aDogICAgICAgICAgJ29hdXRoX2NhbGxiYWNrJyxcbiAgICAgICAgICAgIG9BdXRoV2luZG93VHlwZTogICAgICAgICAgICAnbmV3V2luZG93JyxcbiAgICAgICAgICAgIG9BdXRoV2luZG93T3B0aW9uczogICAgICAgICBudWxsLFxuXG4gICAgICAgICAgICBnbG9iYWxPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuYXRPcHRpb25zID0gKDxhbnk+T2JqZWN0KS5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMudHJ5TG9hZEF1dGhEYXRhKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBBY3Rpb25zXG4gICAgICpcbiAgICAgKi9cblxuICAgIC8vIFJlZ2lzdGVyIHJlcXVlc3RcbiAgICByZWdpc3RlckFjY291bnQocmVnaXN0ZXJEYXRhOiBSZWdpc3RlckRhdGEpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG5cbiAgICAgICAgaWYgKHJlZ2lzdGVyRGF0YS51c2VyVHlwZSA9PSBudWxsKVxuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IG51bGw7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IHRoaXMuZ2V0VXNlclR5cGVCeU5hbWUocmVnaXN0ZXJEYXRhLnVzZXJUeXBlKTtcbiAgICAgICAgICAgIGRlbGV0ZSByZWdpc3RlckRhdGEudXNlclR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICByZWdpc3RlckRhdGEucGFzc3dvcmRfY29uZmlybWF0aW9uID09IG51bGwgJiYgXG4gICAgICAgICAgICByZWdpc3RlckRhdGEucGFzc3dvcmRDb25maXJtYXRpb24gIT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyRGF0YS5wYXNzd29yZF9jb25maXJtYXRpb24gID0gcmVnaXN0ZXJEYXRhLnBhc3N3b3JkQ29uZmlybWF0aW9uO1xuICAgICAgICAgICAgZGVsZXRlIHJlZ2lzdGVyRGF0YS5wYXNzd29yZENvbmZpcm1hdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVyRGF0YS5jb25maXJtX3N1Y2Nlc3NfdXJsICAgID0gdGhpcy5hdE9wdGlvbnMucmVnaXN0ZXJBY2NvdW50Q2FsbGJhY2s7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdCh0aGlzLmdldFVzZXJQYXRoKCkgKyB0aGlzLmF0T3B0aW9ucy5yZWdpc3RlckFjY291bnRQYXRoLCBKU09OLnN0cmluZ2lmeShyZWdpc3RlckRhdGEpKTtcbiAgICB9XG5cbiAgICAvLyBEZWxldGUgQWNjb3VudFxuICAgIGRlbGV0ZUFjY291bnQoKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxldGUodGhpcy5nZXRVc2VyUGF0aCgpICsgdGhpcy5hdE9wdGlvbnMuZGVsZXRlQWNjb3VudFBhdGgpO1xuICAgIH1cblxuICAgIC8vIFNpZ24gaW4gcmVxdWVzdCBhbmQgc2V0IHN0b3JhZ2VcbiAgICBzaWduSW4oc2lnbkluRGF0YTogU2lnbkluRGF0YSk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcblxuICAgICAgICBpZiAoc2lnbkluRGF0YS51c2VyVHlwZSA9PSBudWxsKVxuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IG51bGw7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuYXRDdXJyZW50VXNlclR5cGUgPSB0aGlzLmdldFVzZXJUeXBlQnlOYW1lKHNpZ25JbkRhdGEudXNlclR5cGUpO1xuXG4gICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZW1haWw6ICAgICAgc2lnbkluRGF0YS5lbWFpbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAgIHNpZ25JbkRhdGEucGFzc3dvcmRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG9ic2VydiA9IHRoaXMucG9zdCh0aGlzLmdldFVzZXJQYXRoKCkgKyB0aGlzLmF0T3B0aW9ucy5zaWduSW5QYXRoLCBib2R5KTtcblxuICAgICAgICBvYnNlcnYuc3Vic2NyaWJlKHJlcyA9PiB0aGlzLmF0Q3VycmVudFVzZXJEYXRhID0gcmVzLmpzb24oKS5kYXRhLCBfZXJyb3IgPT4gbnVsbCk7XG5cbiAgICAgICAgcmV0dXJuIG9ic2VydjtcbiAgICB9XG5cbiAgICBzaWduSW5PQXV0aChvQXV0aFR5cGU6IHN0cmluZykge1xuXG4gICAgICAgIGxldCBvQXV0aFBhdGg6IHN0cmluZyA9IHRoaXMuZ2V0T0F1dGhQYXRoKG9BdXRoVHlwZSk7XG4gICAgICAgIGxldCBjYWxsYmFja1VybDogc3RyaW5nID0gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vJHt0aGlzLmF0T3B0aW9ucy5vQXV0aENhbGxiYWNrUGF0aH1gO1xuICAgICAgICBsZXQgb0F1dGhXaW5kb3dUeXBlOiBzdHJpbmcgPSB0aGlzLmF0T3B0aW9ucy5vQXV0aFdpbmRvd1R5cGU7XG4gICAgICAgIGxldCBhdXRoVXJsOiBzdHJpbmcgPSB0aGlzLmdldE9BdXRoVXJsKG9BdXRoUGF0aCwgY2FsbGJhY2tVcmwsIG9BdXRoV2luZG93VHlwZSk7XG5cbiAgICAgICAgaWYgKG9BdXRoV2luZG93VHlwZSA9PSAnbmV3V2luZG93Jykge1xuICAgICAgICAgICAgbGV0IG9BdXRoV2luZG93T3B0aW9ucyA9IHRoaXMuYXRPcHRpb25zLm9BdXRoV2luZG93T3B0aW9ucztcbiAgICAgICAgICAgIGxldCB3aW5kb3dPcHRpb25zID0gJyc7XG5cbiAgICAgICAgICAgIGlmIChvQXV0aFdpbmRvd09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb0F1dGhXaW5kb3dPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd09wdGlvbnMgKz0gYCwke2tleX09JHtvQXV0aFdpbmRvd09wdGlvbnNba2V5XX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHBvcHVwID0gd2luZG93Lm9wZW4oXG4gICAgICAgICAgICAgICAgYXV0aFVybCxcbiAgICAgICAgICAgICAgICAnX2JsYW5rJyxcbiAgICAgICAgICAgICAgICBgY2xvc2VidXR0b25jYXB0aW9uPUNhbmNlbCR7d2luZG93T3B0aW9uc31gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdENyZWRlbnRpYWxzVmlhUG9zdE1lc3NhZ2UocG9wdXApO1xuICAgICAgICB9IGVsc2UgaWYgKG9BdXRoV2luZG93VHlwZSA9PSAnc2FtZVdpbmRvdycpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXV0aFVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGBVbnN1cHBvcnRlZCBvQXV0aFdpbmRvd1R5cGUgXCIke29BdXRoV2luZG93VHlwZX1cImA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9jZXNzT0F1dGhDYWxsYmFjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nZXRBdXRoRGF0YUZyb21QYXJhbXMoKTtcbiAgICB9XG5cbiAgICAvLyBTaWduIG91dCByZXF1ZXN0IGFuZCBkZWxldGUgc3RvcmFnZVxuICAgIHNpZ25PdXQoKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICBsZXQgb2JzZXJ2ID0gdGhpcy5kZWxldGUodGhpcy5nZXRVc2VyUGF0aCgpICsgdGhpcy5hdE9wdGlvbnMuc2lnbk91dFBhdGgpO1xuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhY2Nlc3NUb2tlbicpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY2xpZW50Jyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdleHBpcnknKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuVHlwZScpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndWlkJyk7XG5cbiAgICAgICAgdGhpcy5hdEN1cnJlbnRBdXRoRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXRDdXJyZW50VXNlclR5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLmF0Q3VycmVudFVzZXJEYXRhID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gb2JzZXJ2O1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRva2VuIHJlcXVlc3RcbiAgICB2YWxpZGF0ZVRva2VuKCk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgbGV0IG9ic2VydiA9IHRoaXMuZ2V0KHRoaXMuZ2V0VXNlclBhdGgoKSArIHRoaXMuYXRPcHRpb25zLnZhbGlkYXRlVG9rZW5QYXRoKTtcblxuICAgICAgICBvYnNlcnYuc3Vic2NyaWJlKFxuICAgICAgICAgICAgcmVzID0+IHRoaXMuYXRDdXJyZW50VXNlckRhdGEgPSByZXMuanNvbigpLmRhdGEsXG4gICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxICYmIHRoaXMuYXRPcHRpb25zLnNpZ25PdXRGYWlsZWRWYWxpZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZ25PdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb2JzZXJ2O1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBwYXNzd29yZCByZXF1ZXN0XG4gICAgdXBkYXRlUGFzc3dvcmQodXBkYXRlUGFzc3dvcmREYXRhOiBVcGRhdGVQYXNzd29yZERhdGEpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVBhc3N3b3JkRGF0YS51c2VyVHlwZSAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IHRoaXMuZ2V0VXNlclR5cGVCeU5hbWUodXBkYXRlUGFzc3dvcmREYXRhLnVzZXJUeXBlKTtcblxuICAgICAgICBsZXQgYXJnczogYW55O1xuXG4gICAgICAgIGlmICh1cGRhdGVQYXNzd29yZERhdGEucGFzc3dvcmRDdXJyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICAgICAgICAgICAgICAgdXBkYXRlUGFzc3dvcmREYXRhLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjogIHVwZGF0ZVBhc3N3b3JkRGF0YS5wYXNzd29yZENvbmZpcm1hdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncyA9IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50X3Bhc3N3b3JkOiAgICAgICB1cGRhdGVQYXNzd29yZERhdGEucGFzc3dvcmRDdXJyZW50LFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAgICAgICAgICAgICAgIHVwZGF0ZVBhc3N3b3JkRGF0YS5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZF9jb25maXJtYXRpb246ICB1cGRhdGVQYXNzd29yZERhdGEucGFzc3dvcmRDb25maXJtYXRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlUGFzc3dvcmREYXRhLnJlc2V0UGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgYXJncy5yZXNldF9wYXNzd29yZF90b2tlbiA9IHVwZGF0ZVBhc3N3b3JkRGF0YS5yZXNldFBhc3N3b3JkVG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5wdXQodGhpcy5nZXRVc2VyUGF0aCgpICsgdGhpcy5hdE9wdGlvbnMudXBkYXRlUGFzc3dvcmRQYXRoLCBib2R5KTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCBwYXNzd29yZCByZXF1ZXN0XG4gICAgcmVzZXRQYXNzd29yZChyZXNldFBhc3N3b3JkRGF0YTogUmVzZXRQYXNzd29yZERhdGEpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG5cbiAgICAgICAgaWYgKHJlc2V0UGFzc3dvcmREYXRhLnVzZXJUeXBlID09IG51bGwpXG4gICAgICAgICAgICB0aGlzLmF0Q3VycmVudFVzZXJUeXBlID0gbnVsbDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IHRoaXMuZ2V0VXNlclR5cGVCeU5hbWUocmVzZXRQYXNzd29yZERhdGEudXNlclR5cGUpO1xuXG4gICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZW1haWw6ICAgICAgICAgIHJlc2V0UGFzc3dvcmREYXRhLmVtYWlsLFxuICAgICAgICAgICAgcmVkaXJlY3RfdXJsOiAgIHRoaXMuYXRPcHRpb25zLnJlc2V0UGFzc3dvcmRDYWxsYmFja1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wb3N0KHRoaXMuZ2V0VXNlclBhdGgoKSArIHRoaXMuYXRPcHRpb25zLnJlc2V0UGFzc3dvcmRQYXRoLCBib2R5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEhUVFAgV3JhcHBlcnNcbiAgICAgKlxuICAgICAqL1xuXG4gICAgZ2V0KHVybDogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnNBcmdzKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHRoaXMubWVyZ2VSZXF1ZXN0T3B0aW9uc0FyZ3Moe1xuICAgICAgICAgICAgdXJsOiAgICB0aGlzLmdldEFwaVBhdGgoKSArIHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogUmVxdWVzdE1ldGhvZC5HZXRcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIHBvc3QodXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQXJncyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh0aGlzLm1lcmdlUmVxdWVzdE9wdGlvbnNBcmdzKHtcbiAgICAgICAgICAgIHVybDogICAgdGhpcy5nZXRBcGlQYXRoKCkgKyB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IFJlcXVlc3RNZXRob2QuUG9zdCxcbiAgICAgICAgICAgIGJvZHk6ICAgYm9keVxuICAgICAgICB9LCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHV0KHVybDogc3RyaW5nLCBib2R5OiBhbnksIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9uc0FyZ3MpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodGhpcy5tZXJnZVJlcXVlc3RPcHRpb25zQXJncyh7XG4gICAgICAgICAgICB1cmw6ICAgIHRoaXMuZ2V0QXBpUGF0aCgpICsgdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBSZXF1ZXN0TWV0aG9kLlB1dCxcbiAgICAgICAgICAgIGJvZHk6ICAgYm9keVxuICAgICAgICB9LCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgZGVsZXRlKHVybDogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnNBcmdzKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHRoaXMubWVyZ2VSZXF1ZXN0T3B0aW9uc0FyZ3Moe1xuICAgICAgICAgICAgdXJsOiAgICB0aGlzLmdldEFwaVBhdGgoKSArIHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogUmVxdWVzdE1ldGhvZC5EZWxldGVcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIHBhdGNoKHVybDogc3RyaW5nLCBib2R5OiBhbnksIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9uc0FyZ3MpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodGhpcy5tZXJnZVJlcXVlc3RPcHRpb25zQXJncyh7XG4gICAgICAgICAgICB1cmw6ICAgIHRoaXMuZ2V0QXBpUGF0aCgpICsgdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBSZXF1ZXN0TWV0aG9kLlBhdGNoLFxuICAgICAgICAgICAgYm9keTogICBib2R5XG4gICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBoZWFkKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQXJncyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFJlcXVlc3RNZXRob2QuSGVhZCxcbiAgICAgICAgICAgIHVybDogICAgdGhpcy5nZXRBcGlQYXRoKCkgKyBwYXRoXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wdGlvbnModXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9uc0FyZ3MpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodGhpcy5tZXJnZVJlcXVlc3RPcHRpb25zQXJncyh7XG4gICAgICAgICAgICB1cmw6ICAgIHRoaXMuZ2V0QXBpUGF0aCgpICsgdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBSZXF1ZXN0TWV0aG9kLk9wdGlvbnNcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdCBhbmQgc2VuZCBIdHRwIHJlcXVlc3RcbiAgICByZXF1ZXN0KG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zQXJncyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcblxuICAgICAgICBsZXQgYmFzZVJlcXVlc3RPcHRpb25zOiBSZXF1ZXN0T3B0aW9ucztcbiAgICAgICAgbGV0IGJhc2VIZWFkZXJzOiAgICAgICAgeyBba2V5OnN0cmluZ106IHN0cmluZzsgfSA9IHRoaXMuYXRPcHRpb25zLmdsb2JhbE9wdGlvbnMuaGVhZGVycztcblxuICAgICAgICAvLyBHZXQgYXV0aCBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgICAgICB0aGlzLmdldEF1dGhEYXRhRnJvbVN0b3JhZ2UoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1lcmdlIGF1dGggaGVhZGVycyB0byByZXF1ZXN0IGlmIHNldFxuICAgICAgICBpZiAodGhpcy5hdEN1cnJlbnRBdXRoRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAoPGFueT5PYmplY3QpLmFzc2lnbihiYXNlSGVhZGVycywge1xuICAgICAgICAgICAgICAgICdhY2Nlc3MtdG9rZW4nOiB0aGlzLmF0Q3VycmVudEF1dGhEYXRhLmFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICdjbGllbnQnOiAgICAgICB0aGlzLmF0Q3VycmVudEF1dGhEYXRhLmNsaWVudCxcbiAgICAgICAgICAgICAgICAnZXhwaXJ5JzogICAgICAgdGhpcy5hdEN1cnJlbnRBdXRoRGF0YS5leHBpcnksXG4gICAgICAgICAgICAgICAgJ3Rva2VuLXR5cGUnOiAgIHRoaXMuYXRDdXJyZW50QXV0aERhdGEudG9rZW5UeXBlLFxuICAgICAgICAgICAgICAgICd1aWQnOiAgICAgICAgICB0aGlzLmF0Q3VycmVudEF1dGhEYXRhLnVpZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBiYXNlUmVxdWVzdE9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoYmFzZUhlYWRlcnMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1lcmdlIHN0YW5kYXJkIGFuZCBjdXN0b20gUmVxdWVzdE9wdGlvbnNcbiAgICAgICAgYmFzZVJlcXVlc3RPcHRpb25zID0gYmFzZVJlcXVlc3RPcHRpb25zLm1lcmdlKG9wdGlvbnMpO1xuXG4gICAgICAgIGxldCByZXNwb25zZSA9IHRoaXMuaHR0cC5yZXF1ZXN0KG5ldyBSZXF1ZXN0KGJhc2VSZXF1ZXN0T3B0aW9ucykpLnBpcGUoc2hhcmUoKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1lcmdlUmVxdWVzdE9wdGlvbnNBcmdzKG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zQXJncywgYWRkT3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQXJncyk6IFJlcXVlc3RPcHRpb25zQXJncyB7XG5cbiAgICAgICAgbGV0IHJldHVybk9wdGlvbnM6IFJlcXVlc3RPcHRpb25zQXJncyA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMpXG4gICAgICAgICAgICAoPGFueT5PYmplY3QpLmFzc2lnbihyZXR1cm5PcHRpb25zLCBhZGRPcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gcmV0dXJuT3B0aW9ucztcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiByZXNwb25zZSBpcyBjb21wbGV0ZSBhbmQgbmV3ZXIsIHRoZW4gdXBkYXRlIHN0b3JhZ2VcbiAgICBwcml2YXRlIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlOiBPYnNlcnZhYmxlPFJlc3BvbnNlPik6IHZvaWQge1xuICAgICAgICByZXNwb25zZS5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0QXV0aEhlYWRlcnNGcm9tUmVzcG9uc2UoPGFueT5yZXMpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmdldEF1dGhIZWFkZXJzRnJvbVJlc3BvbnNlKDxhbnk+ZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEdldCBBdXRoIERhdGFcbiAgICAgKlxuICAgICAqL1xuXG4gICAgLy8gVHJ5IHRvIGxvYWQgYXV0aCBkYXRhXG4gICAgcHJpdmF0ZSB0cnlMb2FkQXV0aERhdGEoKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHVzZXJUeXBlID0gdGhpcy5nZXRVc2VyVHlwZUJ5TmFtZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlclR5cGUnKSk7XG5cbiAgICAgICAgaWYgKHVzZXJUeXBlKVxuICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9IHVzZXJUeXBlO1xuXG4gICAgICAgIHRoaXMuZ2V0QXV0aERhdGFGcm9tU3RvcmFnZSgpO1xuXG4gICAgICAgIGlmKHRoaXMuYWN0aXZhdGVkUm91dGUpXG4gICAgICAgICAgICB0aGlzLmdldEF1dGhEYXRhRnJvbVBhcmFtcygpO1xuXG4gICAgICAgIGlmICh0aGlzLmF0Q3VycmVudEF1dGhEYXRhKVxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRva2VuKCk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgQXV0aCBkYXRhIGZyb20gcmVzcG9uc2VcbiAgICBwcml2YXRlIGdldEF1dGhIZWFkZXJzRnJvbVJlc3BvbnNlKGRhdGE6IGFueSk6IHZvaWQge1xuICAgICAgICBsZXQgaGVhZGVycyA9IGRhdGEuaGVhZGVycztcblxuICAgICAgICBsZXQgYXV0aERhdGE6IEF1dGhEYXRhID0ge1xuICAgICAgICAgICAgYWNjZXNzVG9rZW46ICAgIGhlYWRlcnMuZ2V0KCdhY2Nlc3MtdG9rZW4nKSxcbiAgICAgICAgICAgIGNsaWVudDogICAgICAgICBoZWFkZXJzLmdldCgnY2xpZW50JyksXG4gICAgICAgICAgICBleHBpcnk6ICAgICAgICAgaGVhZGVycy5nZXQoJ2V4cGlyeScpLFxuICAgICAgICAgICAgdG9rZW5UeXBlOiAgICAgIGhlYWRlcnMuZ2V0KCd0b2tlbi10eXBlJyksXG4gICAgICAgICAgICB1aWQ6ICAgICAgICAgICAgaGVhZGVycy5nZXQoJ3VpZCcpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXRBdXRoRGF0YShhdXRoRGF0YSk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgQXV0aCBkYXRhIGZyb20gcG9zdCBtZXNzYWdlXG4gICAgcHJpdmF0ZSBnZXRBdXRoRGF0YUZyb21Qb3N0TWVzc2FnZShkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgbGV0IGF1dGhEYXRhOiBBdXRoRGF0YSA9IHtcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiAgICBkYXRhWydhdXRoX3Rva2VuJ10sXG4gICAgICAgICAgICBjbGllbnQ6ICAgICAgICAgZGF0YVsnY2xpZW50X2lkJ10sXG4gICAgICAgICAgICBleHBpcnk6ICAgICAgICAgZGF0YVsnZXhwaXJ5J10sXG4gICAgICAgICAgICB0b2tlblR5cGU6ICAgICAgJ0JlYXJlcicsXG4gICAgICAgICAgICB1aWQ6ICAgICAgICAgICAgZGF0YVsndWlkJ11cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNldEF1dGhEYXRhKGF1dGhEYXRhKTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gZ2V0IGF1dGggZGF0YSBmcm9tIHN0b3JhZ2UuXG4gICAgcHJpdmF0ZSBnZXRBdXRoRGF0YUZyb21TdG9yYWdlKCk6IHZvaWQge1xuXG4gICAgICAgIGxldCBhdXRoRGF0YTogQXV0aERhdGEgPSB7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjY2Vzc1Rva2VuJyksXG4gICAgICAgICAgICBjbGllbnQ6ICAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NsaWVudCcpLFxuICAgICAgICAgICAgZXhwaXJ5OiAgICAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdleHBpcnknKSxcbiAgICAgICAgICAgIHRva2VuVHlwZTogICAgICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW5UeXBlJyksXG4gICAgICAgICAgICB1aWQ6ICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VpZCcpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tBdXRoRGF0YShhdXRoRGF0YSkpXG4gICAgICAgICAgICB0aGlzLmF0Q3VycmVudEF1dGhEYXRhID0gYXV0aERhdGE7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIGdldCBhdXRoIGRhdGEgZnJvbSB1cmwgcGFyYW1ldGVycy5cbiAgICBwcml2YXRlIGdldEF1dGhEYXRhRnJvbVBhcmFtcygpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5hY3RpdmF0ZWRSb3V0ZS5xdWVyeVBhcmFtcykgLy8gRml4IGZvciBUZXN0aW5nLCBuZWVkcyB0byBiZSByZW1vdmVkIGxhdGVyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlZFJvdXRlLnF1ZXJ5UGFyYW1zLnN1YnNjcmliZShxdWVyeVBhcmFtcyA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGF1dGhEYXRhOiBBdXRoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46ICAgIHF1ZXJ5UGFyYW1zWyd0b2tlbiddIHx8IHF1ZXJ5UGFyYW1zWydhdXRoX3Rva2VuJ10sXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogICAgICAgICBxdWVyeVBhcmFtc1snY2xpZW50X2lkJ10sXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyeTogICAgICAgICBxdWVyeVBhcmFtc1snZXhwaXJ5J10sXG4gICAgICAgICAgICAgICAgICAgIHRva2VuVHlwZTogICAgICAnQmVhcmVyJyxcbiAgICAgICAgICAgICAgICAgICAgdWlkOiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zWyd1aWQnXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0F1dGhEYXRhKGF1dGhEYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdEN1cnJlbnRBdXRoRGF0YSA9IGF1dGhEYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTZXQgQXV0aCBEYXRhXG4gICAgICpcbiAgICAgKi9cblxuICAgIC8vIFdyaXRlIGF1dGggZGF0YSB0byBzdG9yYWdlXG4gICAgcHJpdmF0ZSBzZXRBdXRoRGF0YShhdXRoRGF0YTogQXV0aERhdGEpOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5jaGVja0F1dGhEYXRhKGF1dGhEYXRhKSkge1xuXG4gICAgICAgICAgICB0aGlzLmF0Q3VycmVudEF1dGhEYXRhID0gYXV0aERhdGE7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhY2Nlc3NUb2tlbicsIGF1dGhEYXRhLmFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjbGllbnQnLCBhdXRoRGF0YS5jbGllbnQpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2V4cGlyeScsIGF1dGhEYXRhLmV4cGlyeSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW5UeXBlJywgYXV0aERhdGEudG9rZW5UeXBlKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1aWQnLCBhdXRoRGF0YS51aWQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hdEN1cnJlbnRVc2VyVHlwZSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyVHlwZScsIHRoaXMuYXRDdXJyZW50VXNlclR5cGUubmFtZSk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVmFsaWRhdGUgQXV0aCBEYXRhXG4gICAgICpcbiAgICAgKi9cblxuICAgIC8vIENoZWNrIGlmIGF1dGggZGF0YSBjb21wbGV0ZSBhbmQgaWYgcmVzcG9uc2UgdG9rZW4gaXMgbmV3ZXJcbiAgICBwcml2YXRlIGNoZWNrQXV0aERhdGEoYXV0aERhdGE6IEF1dGhEYXRhKTogYm9vbGVhbiB7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYXV0aERhdGEuYWNjZXNzVG9rZW4gIT0gbnVsbCAmJlxuICAgICAgICAgICAgYXV0aERhdGEuY2xpZW50ICE9IG51bGwgJiZcbiAgICAgICAgICAgIGF1dGhEYXRhLmV4cGlyeSAhPSBudWxsICYmXG4gICAgICAgICAgICBhdXRoRGF0YS50b2tlblR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgYXV0aERhdGEudWlkICE9IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdEN1cnJlbnRBdXRoRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBhdXRoRGF0YS5leHBpcnkgPj0gdGhpcy5hdEN1cnJlbnRBdXRoRGF0YS5leHBpcnk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENvbnN0cnVjdCBQYXRocyAvIFVybHNcbiAgICAgKlxuICAgICAqL1xuXG4gICAgcHJpdmF0ZSBnZXRVc2VyUGF0aCgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5hdEN1cnJlbnRVc2VyVHlwZSA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdEN1cnJlbnRVc2VyVHlwZS5wYXRoICsgJy8nO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QXBpUGF0aCgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgY29uc3RydWN0ZWRQYXRoID0gJyc7XG5cbiAgICAgICAgaWYgKHRoaXMuYXRPcHRpb25zLmFwaUJhc2UgIT0gbnVsbClcbiAgICAgICAgICAgIGNvbnN0cnVjdGVkUGF0aCArPSB0aGlzLmF0T3B0aW9ucy5hcGlCYXNlICsgJy8nO1xuXG4gICAgICAgIGlmICh0aGlzLmF0T3B0aW9ucy5hcGlQYXRoICE9IG51bGwpXG4gICAgICAgICAgICBjb25zdHJ1Y3RlZFBhdGggKz0gdGhpcy5hdE9wdGlvbnMuYXBpUGF0aCArICcvJztcblxuICAgICAgICByZXR1cm4gY29uc3RydWN0ZWRQYXRoO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T0F1dGhQYXRoKG9BdXRoVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG9BdXRoUGF0aDogc3RyaW5nO1xuXG4gICAgICAgIG9BdXRoUGF0aCA9IHRoaXMuYXRPcHRpb25zLm9BdXRoUGF0aHNbb0F1dGhUeXBlXTtcblxuICAgICAgICBpZiAob0F1dGhQYXRoID09IG51bGwpXG4gICAgICAgICAgICBvQXV0aFBhdGggPSBgL2F1dGgvJHtvQXV0aFR5cGV9YDtcblxuICAgICAgICByZXR1cm4gb0F1dGhQYXRoO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T0F1dGhVcmwob0F1dGhQYXRoOiBzdHJpbmcsIGNhbGxiYWNrVXJsOiBzdHJpbmcsIHdpbmRvd1R5cGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCB1cmw6IHN0cmluZztcblxuICAgICAgICB1cmwgPSAgIGAke3RoaXMuYXRPcHRpb25zLm9BdXRoQmFzZX0vJHtvQXV0aFBhdGh9YDtcbiAgICAgICAgdXJsICs9ICBgP29tbmlhdXRoX3dpbmRvd190eXBlPSR7d2luZG93VHlwZX1gO1xuICAgICAgICB1cmwgKz0gIGAmYXV0aF9vcmlnaW5fdXJsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGNhbGxiYWNrVXJsKX1gO1xuXG4gICAgICAgIGlmICh0aGlzLmF0Q3VycmVudFVzZXJUeXBlICE9IG51bGwpXG4gICAgICAgICAgICB1cmwgKz0gYCZyZXNvdXJjZV9jbGFzcz0ke3RoaXMuYXRDdXJyZW50VXNlclR5cGUubmFtZX1gO1xuXG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBPQXV0aFxuICAgICAqXG4gICAgICovXG5cbiAgICBwcml2YXRlIHJlcXVlc3RDcmVkZW50aWFsc1ZpYVBvc3RNZXNzYWdlKGF1dGhXaW5kb3c6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCBwb2xsZXJPYnNlcnYgPSBpbnRlcnZhbCg1MDApO1xuXG4gICAgICAgIGxldCByZXNwb25zZU9ic2VydiA9IGZyb21FdmVudCh3aW5kb3csICdtZXNzYWdlJykucGlwZShcbiAgICAgICAgICAgIHBsdWNrKCdkYXRhJyksXG4gICAgICAgICAgICBmaWx0ZXIodGhpcy5vQXV0aFdpbmRvd1Jlc3BvbnNlRmlsdGVyKVxuICAgICAgICApO1xuXG4gICAgICAgIGxldCByZXNwb25zZVN1YnNjcmlwdGlvbiA9IHJlc3BvbnNlT2JzZXJ2LnN1YnNjcmliZShcbiAgICAgICAgICAgIHRoaXMuZ2V0QXV0aERhdGFGcm9tUG9zdE1lc3NhZ2UuYmluZCh0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBwb2xsZXJTdWJzY3JpcHRpb24gPSBwb2xsZXJPYnNlcnYuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChhdXRoV2luZG93LmNsb3NlZClcbiAgICAgICAgICAgICAgICBwb2xsZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBhdXRoV2luZG93LnBvc3RNZXNzYWdlKCdyZXF1ZXN0Q3JlZGVudGlhbHMnLCAnKicpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2VPYnNlcnY7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvQXV0aFdpbmRvd1Jlc3BvbnNlRmlsdGVyKGRhdGE6IGFueSk6IGFueSB7XG4gICAgICAgIGlmKGRhdGEubWVzc2FnZSA9PSAnZGVsaXZlckNyZWRlbnRpYWxzJyB8fCBkYXRhLm1lc3NhZ2UgPT0gJ2F1dGhGYWlsdXJlJylcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbGl0aWVzXG4gICAgICpcbiAgICAgKi9cblxuICAgIC8vIE1hdGNoIHVzZXIgY29uZmlnIGJ5IHVzZXIgY29uZmlnIG5hbWVcbiAgICBwcml2YXRlIGdldFVzZXJUeXBlQnlOYW1lKG5hbWU6IHN0cmluZyk6IFVzZXJUeXBlIHtcbiAgICAgICAgaWYgKG5hbWUgPT0gbnVsbCB8fCB0aGlzLmF0T3B0aW9ucy51c2VyVHlwZXMgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmF0T3B0aW9ucy51c2VyVHlwZXMuZmluZChcbiAgICAgICAgICAgIHVzZXJUeXBlID0+IHVzZXJUeXBlLm5hbWUgPT09IG5hbWVcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=
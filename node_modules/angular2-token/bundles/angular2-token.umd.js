(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/router'), require('@angular/http'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular2-token', ['exports', '@angular/core', '@angular/forms', '@angular/common', '@angular/router', '@angular/http', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['angular2-token'] = {}),global.ng.core,global.ng.forms,global.ng.common,global.ng.router,global.ng.http,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,forms,common,router,http,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tFormService = (function () {
        function A2tFormService() {
            this.submit$ = new core.EventEmitter();
            this.submitLock = false;
        }
        /**
         * @param {?} fields
         * @return {?}
         */
        A2tFormService.prototype.initForm = /**
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                this.fields = fields;
                this._createFormGroup();
            };
        /**
         * @return {?}
         */
        A2tFormService.prototype.submit = /**
         * @return {?}
         */
            function () {
                this.submitLock = true;
                this.submit$.emit(this.formGroup.value);
            };
        /**
         * @return {?}
         */
        A2tFormService.prototype.unlockSubmit = /**
         * @return {?}
         */
            function () {
                this.formGroup.reset();
                this.submitLock = false;
            };
        /**
         * @return {?}
         */
        A2tFormService.prototype._createFormGroup = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ group = {};
                this.fields.forEach(function (question) {
                    group[question.key] = new forms.FormControl(null, question.validators);
                });
                this.formGroup = new forms.FormGroup(group);
            };
        A2tFormService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        A2tFormService.ctorParameters = function () { return []; };
        return A2tFormService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tFormComponent = (function () {
        function A2tFormComponent(_formService) {
            this._formService = _formService;
        }
        A2tFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-form',
                        template: "\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    ",
                        styles: ["\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tFormComponent.ctorParameters = function () {
            return [
                { type: A2tFormService }
            ];
        };
        return A2tFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tFormFieldComponent = (function () {
        function A2tFormFieldComponent() {
        }
        /**
         * @return {?}
         */
        A2tFormFieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._control = this.form.controls[this.question.key];
            };
        Object.defineProperty(A2tFormFieldComponent.prototype, "isValid", {
            get: /**
             * @return {?}
             */ function () {
                return this._control.valid;
            },
            enumerable: true,
            configurable: true
        });
        A2tFormFieldComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-form-field',
                        template: "\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    ",
                        styles: ["\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    "]
                    },] },
        ];
        A2tFormFieldComponent.propDecorators = {
            question: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return A2tFormFieldComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tLinksComponent = (function () {
        function A2tLinksComponent() {
        }
        A2tLinksComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-links',
                        template: "\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    ",
                        styles: ["\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tLinksComponent.ctorParameters = function () { return []; };
        A2tLinksComponent.propDecorators = {
            case: [{ type: core.Input }]
        };
        return A2tLinksComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tErrorComponent = (function () {
        function A2tErrorComponent() {
        }
        A2tErrorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-error',
                        template: '<div *ngFor="let error of errors"><p>{{error}}</p></div>',
                        styles: ["\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tErrorComponent.ctorParameters = function () { return []; };
        A2tErrorComponent.propDecorators = {
            errors: [{ type: core.Input }]
        };
        return A2tErrorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tHeadlineComponent = (function () {
        function A2tHeadlineComponent() {
        }
        A2tHeadlineComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-headline',
                        template: '<p><ng-content></ng-content></p>',
                        styles: ["\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tHeadlineComponent.ctorParameters = function () { return []; };
        return A2tHeadlineComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tSharedModule = (function () {
        function A2tSharedModule() {
        }
        A2tSharedModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            router.RouterModule
                        ],
                        declarations: [
                            A2tFormFieldComponent,
                            A2tFormComponent,
                            A2tLinksComponent,
                            A2tErrorComponent,
                            A2tHeadlineComponent
                        ],
                        exports: [
                            A2tFormComponent,
                            A2tLinksComponent,
                            A2tErrorComponent,
                            A2tHeadlineComponent
                        ]
                    },] },
        ];
        return A2tSharedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Angular2TokenService = (function () {
        function Angular2TokenService(http$$1, activatedRoute, router$$1) {
            this.http = http$$1;
            this.activatedRoute = activatedRoute;
            this.router = router$$1;
        }
        Object.defineProperty(Angular2TokenService.prototype, "currentUserType", {
            get: /**
             * @return {?}
             */ function () {
                if (this.atCurrentUserType != null)
                    return this.atCurrentUserType.name;
                else
                    return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Angular2TokenService.prototype, "currentUserData", {
            get: /**
             * @return {?}
             */ function () {
                return this.atCurrentUserData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Angular2TokenService.prototype, "currentAuthData", {
            get: /**
             * @return {?}
             */ function () {
                return this.atCurrentAuthData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Angular2TokenService.prototype, "currentAuthHeaders", {
            get: /**
             * @return {?}
             */ function () {
                if (this.atCurrentAuthData != null) {
                    return new http.Headers({
                        'access-token': this.atCurrentAuthData.accessToken,
                        'client': this.atCurrentAuthData.client,
                        'expiry': this.atCurrentAuthData.expiry,
                        'token-type': this.atCurrentAuthData.tokenType,
                        'uid': this.atCurrentAuthData.uid
                    });
                }
                return new http.Headers;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.userSignedIn = /**
         * @return {?}
         */
            function () {
                return !!this.atCurrentAuthData;
            };
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.canActivate = /**
         * @return {?}
         */
            function () {
                if (this.userSignedIn())
                    return true;
                else {
                    // Store current location in storage (usefull for redirection after signing in)
                    if (this.atOptions.signInStoredUrlStorageKey) {
                        localStorage.setItem(this.atOptions.signInStoredUrlStorageKey, window.location.pathname + window.location.search);
                    }
                    // Redirect user to sign in if signInRedirect is set
                    if (this.router && this.atOptions.signInRedirect)
                        this.router.navigate([this.atOptions.signInRedirect]);
                    return false;
                }
            };
        // Inital configuration
        /**
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.init = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var /** @type {?} */ defaultOptions = {
                    apiPath: null,
                    apiBase: null,
                    signInPath: 'auth/sign_in',
                    signInRedirect: null,
                    signInStoredUrlStorageKey: null,
                    signOutPath: 'auth/sign_out',
                    validateTokenPath: 'auth/validate_token',
                    signOutFailedValidate: false,
                    registerAccountPath: 'auth',
                    deleteAccountPath: 'auth',
                    registerAccountCallback: window.location.href,
                    updatePasswordPath: 'auth',
                    resetPasswordPath: 'auth/password',
                    resetPasswordCallback: window.location.href,
                    userTypes: null,
                    oAuthBase: window.location.origin,
                    oAuthPaths: {
                        github: 'auth/github'
                    },
                    oAuthCallbackPath: 'oauth_callback',
                    oAuthWindowType: 'newWindow',
                    oAuthWindowOptions: null,
                    globalOptions: {
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    }
                };
                this.atOptions = ((Object)).assign(defaultOptions, options);
                this.tryLoadAuthData();
            };
        /**
         *
         * Actions
         *
         */
        // Register request
        /**
         *
         * Actions
         *
         * @param {?} registerData
         * @return {?}
         */
        Angular2TokenService.prototype.registerAccount = /**
         *
         * Actions
         *
         * @param {?} registerData
         * @return {?}
         */
            function (registerData) {
                if (registerData.userType == null)
                    this.atCurrentUserType = null;
                else {
                    this.atCurrentUserType = this.getUserTypeByName(registerData.userType);
                    delete registerData.userType;
                }
                if (registerData["password_confirmation"] == null &&
                    registerData.passwordConfirmation != null) {
                    registerData["password_confirmation"] = registerData.passwordConfirmation;
                    delete registerData.passwordConfirmation;
                }
                registerData["confirm_success_url"] = this.atOptions.registerAccountCallback;
                return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));
            };
        // Delete Account
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.deleteAccount = /**
         * @return {?}
         */
            function () {
                return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);
            };
        // Sign in request and set storage
        /**
         * @param {?} signInData
         * @return {?}
         */
        Angular2TokenService.prototype.signIn = /**
         * @param {?} signInData
         * @return {?}
         */
            function (signInData) {
                var _this = this;
                if (signInData.userType == null)
                    this.atCurrentUserType = null;
                else
                    this.atCurrentUserType = this.getUserTypeByName(signInData.userType);
                var /** @type {?} */ body = JSON.stringify({
                    email: signInData.email,
                    password: signInData.password
                });
                var /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);
                observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (_error) { return null; });
                return observ;
            };
        /**
         * @param {?} oAuthType
         * @return {?}
         */
        Angular2TokenService.prototype.signInOAuth = /**
         * @param {?} oAuthType
         * @return {?}
         */
            function (oAuthType) {
                var /** @type {?} */ oAuthPath = this.getOAuthPath(oAuthType);
                var /** @type {?} */ callbackUrl = window.location.origin + "/" + this.atOptions.oAuthCallbackPath;
                var /** @type {?} */ oAuthWindowType = this.atOptions.oAuthWindowType;
                var /** @type {?} */ authUrl = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);
                if (oAuthWindowType == 'newWindow') {
                    var /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;
                    var /** @type {?} */ windowOptions = '';
                    if (oAuthWindowOptions) {
                        for (var /** @type {?} */ key in oAuthWindowOptions) {
                            windowOptions += "," + key + "=" + oAuthWindowOptions[key];
                        }
                    }
                    var /** @type {?} */ popup = window.open(authUrl, '_blank', "closebuttoncaption=Cancel" + windowOptions);
                    return this.requestCredentialsViaPostMessage(popup);
                }
                else if (oAuthWindowType == 'sameWindow') {
                    window.location.href = authUrl;
                }
                else {
                    throw "Unsupported oAuthWindowType \"" + oAuthWindowType + "\"";
                }
            };
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.processOAuthCallback = /**
         * @return {?}
         */
            function () {
                this.getAuthDataFromParams();
            };
        // Sign out request and delete storage
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.signOut = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);
                localStorage.removeItem('accessToken');
                localStorage.removeItem('client');
                localStorage.removeItem('expiry');
                localStorage.removeItem('tokenType');
                localStorage.removeItem('uid');
                this.atCurrentAuthData = null;
                this.atCurrentUserType = null;
                this.atCurrentUserData = null;
                return observ;
            };
        // Validate token request
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.validateToken = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);
                observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (error) {
                    if (error.status === 401 && _this.atOptions.signOutFailedValidate) {
                        _this.signOut();
                    }
                });
                return observ;
            };
        // Update password request
        /**
         * @param {?} updatePasswordData
         * @return {?}
         */
        Angular2TokenService.prototype.updatePassword = /**
         * @param {?} updatePasswordData
         * @return {?}
         */
            function (updatePasswordData) {
                if (updatePasswordData.userType != null)
                    this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);
                var /** @type {?} */ args;
                if (updatePasswordData.passwordCurrent == null) {
                    args = {
                        password: updatePasswordData.password,
                        password_confirmation: updatePasswordData.passwordConfirmation
                    };
                }
                else {
                    args = {
                        current_password: updatePasswordData.passwordCurrent,
                        password: updatePasswordData.password,
                        password_confirmation: updatePasswordData.passwordConfirmation
                    };
                }
                if (updatePasswordData.resetPasswordToken) {
                    args.reset_password_token = updatePasswordData.resetPasswordToken;
                }
                var /** @type {?} */ body = JSON.stringify(args);
                return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);
            };
        // Reset password request
        /**
         * @param {?} resetPasswordData
         * @return {?}
         */
        Angular2TokenService.prototype.resetPassword = /**
         * @param {?} resetPasswordData
         * @return {?}
         */
            function (resetPasswordData) {
                if (resetPasswordData.userType == null)
                    this.atCurrentUserType = null;
                else
                    this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);
                var /** @type {?} */ body = JSON.stringify({
                    email: resetPasswordData.email,
                    redirect_url: this.atOptions.resetPasswordCallback
                });
                return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);
            };
        /**
         *
         * HTTP Wrappers
         *
         */
        /**
         *
         * HTTP Wrappers
         *
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.get = /**
         *
         * HTTP Wrappers
         *
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Get
                }, options));
            };
        /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.post = /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Post,
                    body: body
                }, options));
            };
        /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.put = /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Put,
                    body: body
                }, options));
            };
        /**
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.delete = /**
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Delete
                }, options));
            };
        /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.patch = /**
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
            function (url, body, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Patch,
                    body: body
                }, options));
            };
        /**
         * @param {?} path
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.head = /**
         * @param {?} path
         * @param {?=} options
         * @return {?}
         */
            function (path, options) {
                return this.request({
                    method: http.RequestMethod.Head,
                    url: this.getApiPath() + path
                });
            };
        /**
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        Angular2TokenService.prototype.options = /**
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (url, options) {
                return this.request(this.mergeRequestOptionsArgs({
                    url: this.getApiPath() + url,
                    method: http.RequestMethod.Options
                }, options));
            };
        // Construct and send Http request
        /**
         * @param {?} options
         * @return {?}
         */
        Angular2TokenService.prototype.request = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var /** @type {?} */ baseRequestOptions;
                var /** @type {?} */ baseHeaders = this.atOptions.globalOptions.headers;
                // Get auth data from local storage
                this.getAuthDataFromStorage();
                // Merge auth headers to request if set
                if (this.atCurrentAuthData != null) {
                    ((Object)).assign(baseHeaders, {
                        'access-token': this.atCurrentAuthData.accessToken,
                        'client': this.atCurrentAuthData.client,
                        'expiry': this.atCurrentAuthData.expiry,
                        'token-type': this.atCurrentAuthData.tokenType,
                        'uid': this.atCurrentAuthData.uid
                    });
                }
                baseRequestOptions = new http.RequestOptions({
                    headers: new http.Headers(baseHeaders)
                });
                // Merge standard and custom RequestOptions
                baseRequestOptions = baseRequestOptions.merge(options);
                var /** @type {?} */ response = this.http.request(new http.Request(baseRequestOptions)).pipe(operators.share());
                this.handleResponse(response);
                return response;
            };
        /**
         * @param {?} options
         * @param {?=} addOptions
         * @return {?}
         */
        Angular2TokenService.prototype.mergeRequestOptionsArgs = /**
         * @param {?} options
         * @param {?=} addOptions
         * @return {?}
         */
            function (options, addOptions) {
                var /** @type {?} */ returnOptions = options;
                if (options)
                    ((Object)).assign(returnOptions, addOptions);
                return returnOptions;
            };
        /**
         * @param {?} response
         * @return {?}
         */
        Angular2TokenService.prototype.handleResponse = /**
         * @param {?} response
         * @return {?}
         */
            function (response) {
                var _this = this;
                response.subscribe(function (res) {
                    _this.getAuthHeadersFromResponse(/** @type {?} */ (res));
                }, function (error) {
                    _this.getAuthHeadersFromResponse(/** @type {?} */ (error));
                });
            };
        /**
         *
         * Get Auth Data
         *
         * @return {?}
         */
        Angular2TokenService.prototype.tryLoadAuthData = /**
         *
         * Get Auth Data
         *
         * @return {?}
         */
            function () {
                var /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));
                if (userType)
                    this.atCurrentUserType = userType;
                this.getAuthDataFromStorage();
                if (this.activatedRoute)
                    this.getAuthDataFromParams();
                if (this.atCurrentAuthData)
                    this.validateToken();
            };
        /**
         * @param {?} data
         * @return {?}
         */
        Angular2TokenService.prototype.getAuthHeadersFromResponse = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var /** @type {?} */ headers = data.headers;
                var /** @type {?} */ authData = {
                    accessToken: headers.get('access-token'),
                    client: headers.get('client'),
                    expiry: headers.get('expiry'),
                    tokenType: headers.get('token-type'),
                    uid: headers.get('uid')
                };
                this.setAuthData(authData);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        Angular2TokenService.prototype.getAuthDataFromPostMessage = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var /** @type {?} */ authData = {
                    accessToken: data['auth_token'],
                    client: data['client_id'],
                    expiry: data['expiry'],
                    tokenType: 'Bearer',
                    uid: data['uid']
                };
                this.setAuthData(authData);
            };
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.getAuthDataFromStorage = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ authData = {
                    accessToken: localStorage.getItem('accessToken'),
                    client: localStorage.getItem('client'),
                    expiry: localStorage.getItem('expiry'),
                    tokenType: localStorage.getItem('tokenType'),
                    uid: localStorage.getItem('uid')
                };
                if (this.checkAuthData(authData))
                    this.atCurrentAuthData = authData;
            };
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.getAuthDataFromParams = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.activatedRoute.queryParams)
                    // Fix for Testing, needs to be removed later
                    this.activatedRoute.queryParams.subscribe(function (queryParams) {
                        var /** @type {?} */ authData = {
                            accessToken: queryParams['token'] || queryParams['auth_token'],
                            client: queryParams['client_id'],
                            expiry: queryParams['expiry'],
                            tokenType: 'Bearer',
                            uid: queryParams['uid']
                        };
                        if (_this.checkAuthData(authData))
                            _this.atCurrentAuthData = authData;
                    });
            };
        /**
         *
         * Set Auth Data
         *
         * @param {?} authData
         * @return {?}
         */
        Angular2TokenService.prototype.setAuthData = /**
         *
         * Set Auth Data
         *
         * @param {?} authData
         * @return {?}
         */
            function (authData) {
                if (this.checkAuthData(authData)) {
                    this.atCurrentAuthData = authData;
                    localStorage.setItem('accessToken', authData.accessToken);
                    localStorage.setItem('client', authData.client);
                    localStorage.setItem('expiry', authData.expiry);
                    localStorage.setItem('tokenType', authData.tokenType);
                    localStorage.setItem('uid', authData.uid);
                    if (this.atCurrentUserType != null)
                        localStorage.setItem('userType', this.atCurrentUserType.name);
                }
            };
        /**
         *
         * Validate Auth Data
         *
         * @param {?} authData
         * @return {?}
         */
        Angular2TokenService.prototype.checkAuthData = /**
         *
         * Validate Auth Data
         *
         * @param {?} authData
         * @return {?}
         */
            function (authData) {
                if (authData.accessToken != null &&
                    authData.client != null &&
                    authData.expiry != null &&
                    authData.tokenType != null &&
                    authData.uid != null) {
                    if (this.atCurrentAuthData != null)
                        return authData.expiry >= this.atCurrentAuthData.expiry;
                    else
                        return true;
                }
                else {
                    return false;
                }
            };
        /**
         *
         * Construct Paths / Urls
         *
         * @return {?}
         */
        Angular2TokenService.prototype.getUserPath = /**
         *
         * Construct Paths / Urls
         *
         * @return {?}
         */
            function () {
                if (this.atCurrentUserType == null)
                    return '';
                else
                    return this.atCurrentUserType.path + '/';
            };
        /**
         * @return {?}
         */
        Angular2TokenService.prototype.getApiPath = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ constructedPath = '';
                if (this.atOptions.apiBase != null)
                    constructedPath += this.atOptions.apiBase + '/';
                if (this.atOptions.apiPath != null)
                    constructedPath += this.atOptions.apiPath + '/';
                return constructedPath;
            };
        /**
         * @param {?} oAuthType
         * @return {?}
         */
        Angular2TokenService.prototype.getOAuthPath = /**
         * @param {?} oAuthType
         * @return {?}
         */
            function (oAuthType) {
                var /** @type {?} */ oAuthPath;
                oAuthPath = this.atOptions.oAuthPaths[oAuthType];
                if (oAuthPath == null)
                    oAuthPath = "/auth/" + oAuthType;
                return oAuthPath;
            };
        /**
         * @param {?} oAuthPath
         * @param {?} callbackUrl
         * @param {?} windowType
         * @return {?}
         */
        Angular2TokenService.prototype.getOAuthUrl = /**
         * @param {?} oAuthPath
         * @param {?} callbackUrl
         * @param {?} windowType
         * @return {?}
         */
            function (oAuthPath, callbackUrl, windowType) {
                var /** @type {?} */ url;
                url = this.atOptions.oAuthBase + "/" + oAuthPath;
                url += "?omniauth_window_type=" + windowType;
                url += "&auth_origin_url=" + encodeURIComponent(callbackUrl);
                if (this.atCurrentUserType != null)
                    url += "&resource_class=" + this.atCurrentUserType.name;
                return url;
            };
        /**
         *
         * OAuth
         *
         * @param {?} authWindow
         * @return {?}
         */
        Angular2TokenService.prototype.requestCredentialsViaPostMessage = /**
         *
         * OAuth
         *
         * @param {?} authWindow
         * @return {?}
         */
            function (authWindow) {
                var /** @type {?} */ pollerObserv = rxjs.interval(500);
                var /** @type {?} */ responseObserv = rxjs.fromEvent(window, 'message').pipe(operators.pluck('data'), operators.filter(this.oAuthWindowResponseFilter));
                var /** @type {?} */ responseSubscription = responseObserv.subscribe(this.getAuthDataFromPostMessage.bind(this));
                var /** @type {?} */ pollerSubscription = pollerObserv.subscribe(function () {
                    if (authWindow.closed)
                        pollerSubscription.unsubscribe();
                    else
                        authWindow.postMessage('requestCredentials', '*');
                });
                return responseObserv;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        Angular2TokenService.prototype.oAuthWindowResponseFilter = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (data.message == 'deliverCredentials' || data.message == 'authFailure')
                    return data;
            };
        /**
         *
         * Utilities
         *
         * @param {?} name
         * @return {?}
         */
        Angular2TokenService.prototype.getUserTypeByName = /**
         *
         * Utilities
         *
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (name == null || this.atOptions.userTypes == null)
                    return null;
                return this.atOptions.userTypes.find(function (userType) { return userType.name === name; });
            };
        Angular2TokenService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        Angular2TokenService.ctorParameters = function () {
            return [
                { type: http.Http },
                { type: router.ActivatedRoute, decorators: [{ type: core.Optional }] },
                { type: router.Router, decorators: [{ type: core.Optional }] }
            ];
        };
        return Angular2TokenService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tUiComponent = (function () {
        function A2tUiComponent() {
        }
        A2tUiComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-ui',
                        template: "\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    ",
                        styles: ["\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tUiComponent.ctorParameters = function () { return []; };
        return A2tUiComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BaseField = (function () {
        function BaseField(options) {
            if (options === void 0) {
                options = {};
            }
            this.value = options.value;
            this.key = options.key || '';
            this.label = options.label || '';
            this.validators = options.validators === undefined ? [] : options.validators;
            this.type = options.type || '';
        }
        return BaseField;
    }());
    var /** @type {?} */ SIGN_IN_FORM = [
        new BaseField({
            key: 'email',
            label: 'Email',
            type: 'text',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        }),
        new BaseField({
            key: 'password',
            label: 'Password',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        })
    ];
    var /** @type {?} */ SIGN_UP_FORM = [
        new BaseField({
            key: 'email',
            label: 'Email',
            type: 'text',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        }),
        new BaseField({
            key: 'password',
            label: 'Password',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        }),
        new BaseField({
            key: 'passwordConfirmation',
            label: 'Password Confirmation',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        })
    ];
    var /** @type {?} */ RESET_PASSWORD_FORM = [
        new BaseField({
            key: 'email',
            label: 'Email',
            type: 'text',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        })
    ];
    var /** @type {?} */ UPDATE_PASSWORD_FORM = [
        new BaseField({
            key: 'password',
            label: 'Password',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        }),
        new BaseField({
            key: 'passwordConfirmation',
            label: 'Password Confirmation',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        }),
        new BaseField({
            key: 'passwordCurrent',
            label: 'Old Password',
            type: 'password',
            validators: [
                forms.Validators.required,
                forms.Validators.minLength(8)
            ]
        })
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tSignInComponent = (function () {
        function A2tSignInComponent(_formService, _sessionService, _router) {
            var _this = this;
            this._formService = _formService;
            this._sessionService = _sessionService;
            this._router = _router;
            this._formService.initForm(SIGN_IN_FORM);
            this._formService.submit$.subscribe(function (data) { return _this._sessionService.signIn(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });
        }
        /**
         * @param {?} data
         * @return {?}
         */
        A2tSignInComponent.prototype._handleSuccess = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this._errors = null;
                this._formService.unlockSubmit();
                this._router.navigate(['restricted']);
            };
        /**
         * @param {?} error
         * @return {?}
         */
        A2tSignInComponent.prototype._handleError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this._errors = error.json().errors;
                this._formService.unlockSubmit();
            };
        A2tSignInComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-sign-in',
                        providers: [A2tFormService],
                        template: "\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    "
                    },] },
        ];
        /** @nocollapse */
        A2tSignInComponent.ctorParameters = function () {
            return [
                { type: A2tFormService },
                { type: Angular2TokenService },
                { type: router.Router }
            ];
        };
        return A2tSignInComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tSignUpComponent = (function () {
        function A2tSignUpComponent(_formService, _sessionService, _router) {
            var _this = this;
            this._formService = _formService;
            this._sessionService = _sessionService;
            this._router = _router;
            this._formService.initForm(SIGN_UP_FORM);
            this._formService.submit$.subscribe(function (data) { return _this._sessionService.registerAccount(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });
        }
        /**
         * @param {?} data
         * @return {?}
         */
        A2tSignUpComponent.prototype._handleSuccess = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this._errors = null;
                this._formService.unlockSubmit();
                this._router.navigate(['restricted']);
            };
        /**
         * @param {?} error
         * @return {?}
         */
        A2tSignUpComponent.prototype._handleError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this._errors = error.json().errors.full_messages;
                this._formService.unlockSubmit();
            };
        A2tSignUpComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-sign-up',
                        providers: [A2tFormService],
                        template: "\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    "
                    },] },
        ];
        /** @nocollapse */
        A2tSignUpComponent.ctorParameters = function () {
            return [
                { type: A2tFormService },
                { type: Angular2TokenService },
                { type: router.Router }
            ];
        };
        return A2tSignUpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tResetPasswordComponent = (function () {
        function A2tResetPasswordComponent(_formService, _sessionService) {
            var _this = this;
            this._formService = _formService;
            this._sessionService = _sessionService;
            this._emailSend = false;
            this._formService.initForm(RESET_PASSWORD_FORM);
            this._formService.submit$.subscribe(function (data) { return _this._sessionService.resetPassword(data).subscribe(function (res) { return _this._handleSuccess(); }, function (error) { return _this._handleError(); }); });
        }
        /**
         * @return {?}
         */
        A2tResetPasswordComponent.prototype._handleSuccess = /**
         * @return {?}
         */
            function () {
                this._emailSend = true;
            };
        /**
         * @return {?}
         */
        A2tResetPasswordComponent.prototype._handleError = /**
         * @return {?}
         */
            function () {
                this._emailSend = true;
            };
        A2tResetPasswordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-reset-password',
                        providers: [A2tFormService],
                        template: "\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    ",
                        styles: ["\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    "]
                    },] },
        ];
        /** @nocollapse */
        A2tResetPasswordComponent.ctorParameters = function () {
            return [
                { type: A2tFormService },
                { type: Angular2TokenService }
            ];
        };
        return A2tResetPasswordComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tUpdatePasswordComponent = (function () {
        function A2tUpdatePasswordComponent(_formService, _sessionService, _router) {
            var _this = this;
            this._formService = _formService;
            this._sessionService = _sessionService;
            this._router = _router;
            this._formService.initForm(UPDATE_PASSWORD_FORM);
            this._formService.submit$.subscribe(function (data) { return _this._sessionService.updatePassword(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });
        }
        /**
         * @param {?} data
         * @return {?}
         */
        A2tUpdatePasswordComponent.prototype._handleSuccess = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this._router.navigate(['session/sign-in']);
            };
        /**
         * @param {?} error
         * @return {?}
         */
        A2tUpdatePasswordComponent.prototype._handleError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this._errors = error.json().errors;
                this._formService.unlockSubmit();
            };
        A2tUpdatePasswordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'a2t-update-password',
                        providers: [A2tFormService],
                        template: "\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    "
                    },] },
        ];
        /** @nocollapse */
        A2tUpdatePasswordComponent.ctorParameters = function () {
            return [
                { type: A2tFormService },
                { type: Angular2TokenService },
                { type: router.Router }
            ];
        };
        return A2tUpdatePasswordComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ routes = [{
            path: 'session',
            component: A2tUiComponent,
            children: [
                { path: 'sign-in', component: A2tSignInComponent },
                { path: 'sign-up', component: A2tSignUpComponent },
                { path: 'reset-password', component: A2tResetPasswordComponent },
                {
                    path: 'update-password',
                    component: A2tUpdatePasswordComponent,
                    canActivate: [Angular2TokenService]
                }
            ]
        }];
    var /** @type {?} */ a2tRoutes = router.RouterModule.forChild(routes);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var A2tUiModule = (function () {
        function A2tUiModule() {
        }
        A2tUiModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            A2tSharedModule,
                            a2tRoutes
                        ],
                        declarations: [
                            A2tUiComponent,
                            A2tSignInComponent,
                            A2tSignUpComponent,
                            A2tResetPasswordComponent,
                            A2tUpdatePasswordComponent
                        ]
                    },] },
        ];
        return A2tUiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.A2tUiModule = A2tUiModule;
    exports.Angular2TokenService = Angular2TokenService;
    exports.ɵl = A2tResetPasswordComponent;
    exports.ɵf = A2tErrorComponent;
    exports.ɵb = A2tFormFieldComponent;
    exports.ɵc = A2tFormComponent;
    exports.ɵd = A2tFormService;
    exports.ɵg = A2tHeadlineComponent;
    exports.ɵe = A2tLinksComponent;
    exports.ɵa = A2tSharedModule;
    exports.ɵj = A2tSignInComponent;
    exports.ɵk = A2tSignUpComponent;
    exports.ɵi = A2tUiComponent;
    exports.ɵh = a2tRoutes;
    exports.ɵm = A2tUpdatePasswordComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
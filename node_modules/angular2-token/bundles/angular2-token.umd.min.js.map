{"version":3,"sources":["ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-shared.module.ts","ng://angular2-token/angular2-token.service.ts","ng://angular2-token/a2t-ui/a2t-ui.component.ts","ng://angular2-token/a2t-ui/a2t-ui.forms.ts","ng://angular2-token/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts","ng://angular2-token/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts","ng://angular2-token/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts","ng://angular2-token/a2t-ui/a2t-update-password/a2t-update-password.component.ts","ng://angular2-token/a2t-ui/a2t-ui.routes.ts","ng://angular2-token/a2t-ui/a2t-ui.module.ts"],"names":["A2tFormService","EventEmitter","prototype","initForm","fields","this","_createFormGroup","submit","submitLock","submit$","emit","formGroup","value","unlockSubmit","reset","group","forEach","question","key","FormControl","validators","FormGroup","Injectable","A2tFormComponent","_formService","Component","args","selector","template","styles","A2tFormFieldComponent","ngOnInit","_control","form","controls","Object","defineProperty","valid","Input","A2tLinksComponent","A2tErrorComponent","A2tHeadlineComponent","A2tSharedModule","NgModule","imports","CommonModule","ReactiveFormsModule","RouterModule","declarations","exports","Angular2TokenService","http","activatedRoute","router","atCurrentUserType","name","atCurrentUserData","atCurrentAuthData","Headers","access-token","accessToken","client","expiry","token-type","tokenType","uid","userSignedIn","canActivate","atOptions","signInStoredUrlStorageKey","localStorage","setItem","window","location","pathname","search","signInRedirect","navigate","init","options","defaultOptions","apiPath","apiBase","signInPath","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","href","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","oAuthBase","origin","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","globalOptions","headers","Content-Type","Accept","assign","tryLoadAuthData","registerAccount","registerData","userType","getUserTypeByName","passwordConfirmation","post","getUserPath","JSON","stringify","deleteAccount","delete","signIn","signInData","_this","body","email","password","observ","subscribe","res","json","data","_error","signInOAuth","oAuthType","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","popup","open","requestCredentialsViaPostMessage","processOAuthCallback","getAuthDataFromParams","signOut","removeItem","validateToken","get","error","status","updatePassword","updatePasswordData","passwordCurrent","password_confirmation","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","url","request","mergeRequestOptionsArgs","getApiPath","method","RequestMethod","Get","Post","Put","Delete","patch","Patch","head","path","Head","Options","baseRequestOptions","baseHeaders","getAuthDataFromStorage","RequestOptions","merge","response","Request","pipe","share","handleResponse","addOptions","returnOptions","getAuthHeadersFromResponse","getItem","authData","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","constructedPath","windowType","encodeURIComponent","authWindow","pollerObserv","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","pollerSubscription","bind","closed","unsubscribe","postMessage","message","find","Http","ActivatedRoute","decorators","type","Optional","Router","A2tUiComponent","BaseField","label","undefined","SIGN_IN_FORM","Validators","required","minLength","SIGN_UP_FORM","RESET_PASSWORD_FORM","UPDATE_PASSWORD_FORM","A2tSignInComponent","_sessionService","_router","_handleSuccess","_handleError","_errors","errors","providers","A2tSignUpComponent","full_messages","A2tResetPasswordComponent","_emailSend","A2tUpdatePasswordComponent","routes","component","children","a2tRoutes","forChild","A2tUiModule"],"mappings":"2kBAAA,IAAAA,EAAA,WAkBI,SAAAA,iBAPiB,IAAIC,EAAAA,8BACQ,SAQtBD,EAAAE,UAAAC,kBAASC,GACZC,KAAKD,OAASA,EACdC,KAAKC,oBAGFN,EAAAE,UAAAK,kBACHF,KAAKG,YAAa,EAClBH,KAAKI,QAAQC,KAAKL,KAAKM,UAAUC,QAG9BZ,EAAAE,UAAAW,wBACHR,KAAKM,UAAUG,QACfT,KAAKG,YAAa,GAGdR,EAAAE,UAAAI,4BAEJ,IAAIS,EAAa,GAEjBV,KAAKD,OAAOY,QAAQ,SAAAC,GAChBF,EAAME,EAASC,KAAO,IAAIC,EAAAA,YAAY,KAAMF,EAASG,cAGzDf,KAAKM,UAAY,IAAIU,EAAAA,UAAUN,wBApCtCO,EAAAA,qDAPD,GCAAC,EAAA,WAoEI,SAAAA,EAAmBC,GAAAnB,KAAAmB,aAAAA,6BA/DtBC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,WACVC,SAAU,grBAiBVC,OAAQ,CAAC,8nCAtBJ7B,OAFT,GCAA8B,EAAA,gCA0FIA,EAAA5B,UAAA6B,SAAA,WACI1B,KAAK2B,SAAW3B,KAAK4B,KAAKC,SAAS7B,KAAKY,SAASC,MAGrDiB,OAAAC,eAAIN,EAAA5B,UAAA,UAAO,KAAX,WACI,OAAOG,KAAK2B,SAASK,2DA1F5BZ,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,iBACZC,SAAU,2vCAwCVC,OAAQ,CAAC,60BAsCRS,EAAAA,oBACAA,EAAAA,WAtFL,GCAAC,EAAA,WAsCI,SAAAA,gCApCHd,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,YACZC,SAAU,0WAOVC,OAAQ,CAAC,mhBAyBRS,EAAAA,WApCL,GCAAE,EAAA,WA0BI,SAAAA,gCAxBHf,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,YACZC,SAAY,2DACZC,OAAQ,CAAC,2aAmBRS,EAAAA,WAxBL,GCAAG,EAAA,WAcI,SAAAA,gCAZHhB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,eACZC,SAAY,mCACZC,OAAS,CAAC,wKALd,GCAAa,EAAA,oDAWCC,EAAAA,SAAQjB,KAAA,CAAC,CACNkB,QAAS,CACLC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,cAEJC,aAAc,CACVlB,EACAP,EACAgB,EACAC,EACAC,GAEJQ,QAAS,CACL1B,EACAgB,EACAC,EACAC,SA5BR,GCAAS,EAAA,WAiEI,SAAAA,EACYC,EACYC,EACAC,GAFZhD,KAAA8C,KAAAA,EACY9C,KAAA+C,eAAAA,EACA/C,KAAAgD,OAAAA,SArCxBlB,OAAAC,eAAIc,EAAAhD,UAAA,kBAAe,KAAnB,WACI,OAA8B,MAA1BG,KAAKiD,kBACEjD,KAAKiD,kBAAkBC,KAEvB,sCAGfpB,OAAAC,eAAIc,EAAAhD,UAAA,kBAAe,KAAnB,WACI,OAAOG,KAAKmD,mDAGhBrB,OAAAC,eAAIc,EAAAhD,UAAA,kBAAe,KAAnB,WACI,OAAOG,KAAKoD,mDAGhBtB,OAAAC,eAAIc,EAAAhD,UAAA,qBAAkB,KAAtB,WACI,OAA8B,MAA1BG,KAAKoD,kBACE,IAAIC,EAAAA,QAAQ,CACfC,eAAgBtD,KAAKoD,kBAAkBG,YACvCC,OAAgBxD,KAAKoD,kBAAkBI,OACvCC,OAAgBzD,KAAKoD,kBAAkBK,OACvCC,aAAgB1D,KAAKoD,kBAAkBO,UACvCC,IAAgB5D,KAAKoD,kBAAkBQ,MAIxC,IAAIP,EAAAA,yCAcfR,EAAAhD,UAAAgE,aAAA,WACI,QAAS7D,KAAKoD,mBAGlBP,EAAAhD,UAAAiE,YAAA,WACI,QAAI9D,KAAK6D,iBAID7D,KAAK+D,UAAUC,2BACfC,aAAaC,QACTlE,KAAK+D,UAAUC,0BACfG,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAKhDtE,KAAKgD,QAAUhD,KAAK+D,UAAUQ,gBAC7BvE,KAAKgD,OAAOwB,SAAS,CAACxE,KAAK+D,UAAUQ,kBAElC,IAKf1B,EAAAhD,UAAA4E,KAAA,SAAKC,GAED,IAAIC,EAAuC,CACvCC,QAA4B,KAC5BC,QAA4B,KAE5BC,WAA4B,eAC5BP,eAA4B,KAC5BP,0BAA4B,KAE5Be,YAA4B,gBAC5BC,kBAA4B,sBAC5BC,uBAA4B,EAE5BC,oBAA4B,OAC5BC,kBAA4B,OAC5BC,wBAA4BjB,OAAOC,SAASiB,KAE5CC,mBAA4B,OAE5BC,kBAA4B,gBAC5BC,sBAA4BrB,OAAOC,SAASiB,KAE5CI,UAA4B,KAE5BC,UAA4BvB,OAAOC,SAASuB,OAC5CC,WAAY,CACRC,OAAwB,eAE5BC,kBAA4B,iBAC5BC,gBAA4B,YAC5BC,mBAA4B,KAE5BC,cAAe,CACXC,QAAS,CACLC,eAAgB,mBAChBC,OAAgB,sBAK5BpG,KAAK+D,UAAY,OAAcsC,OAAO1B,EAAgBD,GAEtD1E,KAAKsG,mBAUTzD,EAAAhD,UAAA0G,gBAAA,SAAgBC,GAmBZ,OAjB6B,MAAzBA,EAAaC,SACbzG,KAAKiD,kBAAoB,MAEzBjD,KAAKiD,kBAAoBjD,KAAK0G,kBAAkBF,EAAaC,iBACtDD,EAAaC,UAIkB,MAAtCD,EAAY,uBACyB,MAArCA,EAAaG,uBAEbH,EAAY,sBAA0BA,EAAaG,4BAC5CH,EAAaG,sBAGxBH,EAAY,oBAA0BxG,KAAK+D,UAAUqB,wBAE9CpF,KAAK4G,KAAK5G,KAAK6G,cAAgB7G,KAAK+D,UAAUmB,oBAAqB4B,KAAKC,UAAUP,KAI7F3D,EAAAhD,UAAAmH,cAAA,WACI,OAAOhH,KAAKiH,UAAOjH,KAAK6G,cAAgB7G,KAAK+D,UAAUoB,oBAI3DtC,EAAAhD,UAAAqH,OAAA,SAAOC,GAAP,IAAAC,EAAApH,KAE+B,MAAvBmH,EAAWV,SACXzG,KAAKiD,kBAAoB,KAEzBjD,KAAKiD,kBAAoBjD,KAAK0G,kBAAkBS,EAAWV,UAE/D,IAAIY,EAAOP,KAAKC,UAAU,CACtBO,MAAYH,EAAWG,MACvBC,SAAYJ,EAAWI,WAGvBC,EAASxH,KAAK4G,KAAK5G,KAAK6G,cAAgB7G,KAAK+D,UAAUe,WAAYuC,GAIvE,OAFAG,EAAOC,UAAU,SAAAC,GAAO,OAAAN,EAAKjE,kBAAoBuE,EAAIC,OAAOC,MAAM,SAAAC,GAAU,OAAA,OAErEL,GAGX3E,EAAAhD,UAAAiI,YAAA,SAAYC,GAER,IAAIC,EAAoBhI,KAAKiI,aAAaF,GACtCG,EAAyB/D,OAAOC,SAASuB,OAAM,IAAI3F,KAAK+D,UAAU+B,kBAClEC,EAA0B/F,KAAK+D,UAAUgC,gBACzCoC,EAAkBnI,KAAKoI,YAAYJ,EAAWE,EAAanC,GAE/D,GAAuB,aAAnBA,EAAgC,CAChC,IAAIC,EAAqBhG,KAAK+D,UAAUiC,mBACpCqC,EAAgB,GAEpB,GAAIrC,EACA,IAAK,IAAInF,KAAOmF,EACZqC,GAAiB,IAAIxH,EAAG,IAAImF,EAAmBnF,GAIvD,IAAIyH,EAAQnE,OAAOoE,KACfJ,EACA,SACA,4BAA4BE,GAEhC,OAAOrI,KAAKwI,iCAAiCF,GAC1C,GAAuB,cAAnBvC,EAGP,KAAM,gCAAgCA,EAAe,IAFrD5B,OAAOC,SAASiB,KAAO8C,GAM/BtF,EAAAhD,UAAA4I,qBAAA,WACIzI,KAAK0I,yBAIT7F,EAAAhD,UAAA8I,QAAA,WACI,IAAInB,EAASxH,KAAKiH,UAAOjH,KAAK6G,cAAgB7G,KAAK+D,UAAUgB,aAY7D,OAVAd,aAAa2E,WAAW,eACxB3E,aAAa2E,WAAW,UACxB3E,aAAa2E,WAAW,UACxB3E,aAAa2E,WAAW,aACxB3E,aAAa2E,WAAW,OAExB5I,KAAKoD,kBAAoB,KACzBpD,KAAKiD,kBAAoB,KACzBjD,KAAKmD,kBAAoB,KAElBqE,GAIX3E,EAAAhD,UAAAgJ,cAAA,WAAA,IAAAzB,EAAApH,KACQwH,EAASxH,KAAK8I,IAAI9I,KAAK6G,cAAgB7G,KAAK+D,UAAUiB,mBAU1D,OARAwC,EAAOC,UACH,SAAAC,GAAO,OAAAN,EAAKjE,kBAAoBuE,EAAIC,OAAOC,MAC3C,SAAAmB,GACyB,MAAjBA,EAAMC,QAAkB5B,EAAKrD,UAAUkB,uBACvCmC,EAAKuB,YAIVnB,GAIX3E,EAAAhD,UAAAoJ,eAAA,SAAeC,GAKX,IAAI7H,EAH+B,MAA/B6H,EAAmBzC,WACnBzG,KAAKiD,kBAAoBjD,KAAK0G,kBAAkBwC,EAAmBzC,WAKnEpF,EADsC,MAAtC6H,EAAmBC,gBACZ,CACH5B,SAAwB2B,EAAmB3B,SAC3C6B,sBAAwBF,EAAmBvC,sBAGxC,CACH0C,iBAAwBH,EAAmBC,gBAC3C5B,SAAwB2B,EAAmB3B,SAC3C6B,sBAAwBF,EAAmBvC,sBAI/CuC,EAAmBI,qBACnBjI,EAAKkI,qBAAuBL,EAAmBI,oBAGnD,IAAIjC,EAAOP,KAAKC,UAAU1F,GAC1B,OAAOrB,KAAKwJ,IAAIxJ,KAAK6G,cAAgB7G,KAAK+D,UAAUuB,mBAAoB+B,IAI5ExE,EAAAhD,UAAA4J,cAAA,SAAcC,GAEwB,MAA9BA,EAAkBjD,SAClBzG,KAAKiD,kBAAoB,KAEzBjD,KAAKiD,kBAAoBjD,KAAK0G,kBAAkBgD,EAAkBjD,UAEtE,IAAIY,EAAOP,KAAKC,UAAU,CACtBO,MAAgBoC,EAAkBpC,MAClCqC,aAAgB3J,KAAK+D,UAAUyB,wBAGnC,OAAOxF,KAAK4G,KAAK5G,KAAK6G,cAAgB7G,KAAK+D,UAAUwB,kBAAmB8B,IAS5ExE,EAAAhD,UAAAiJ,IAAA,SAAIc,EAAalF,GACb,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcC,KACvBxF,KAGP7B,EAAAhD,UAAA+G,KAAA,SAAKgD,EAAavC,EAAW3C,GACzB,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcE,KACtB9C,KAAQA,GACT3C,KAGP7B,EAAAhD,UAAA2J,IAAA,SAAII,EAAavC,EAAW3C,GACxB,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcG,IACtB/C,KAAQA,GACT3C,KAGP7B,EAAAhD,UAAAoH,UAAA,SAAO2C,EAAalF,GAChB,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcI,QACvB3F,KAGP7B,EAAAhD,UAAAyK,MAAA,SAAMV,EAAavC,EAAW3C,GAC1B,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcM,MACtBlD,KAAQA,GACT3C,KAGP7B,EAAAhD,UAAA2K,KAAA,SAAKC,EAAc/F,GACf,OAAO1E,KAAK6J,QAAQ,CAChBG,OAAQC,EAAAA,cAAcS,KACtBd,IAAQ5J,KAAK+J,aAAeU,KAIpC5H,EAAAhD,UAAA6E,QAAA,SAAQkF,EAAalF,GACjB,OAAO1E,KAAK6J,QAAQ7J,KAAK8J,wBAAwB,CAC7CF,IAAQ5J,KAAK+J,aAAeH,EAC5BI,OAAQC,EAAAA,cAAcU,SACvBjG,KAIP7B,EAAAhD,UAAAgK,QAAA,SAAQnF,GAEJ,IAAIkG,EACAC,EAAgD7K,KAAK+D,UAAUkC,cAAcC,QAGjFlG,KAAK8K,yBAGyB,MAA1B9K,KAAKoD,mBACL,OAAciD,OAAOwE,EAAa,CAC9BvH,eAAgBtD,KAAKoD,kBAAkBG,YACvCC,OAAgBxD,KAAKoD,kBAAkBI,OACvCC,OAAgBzD,KAAKoD,kBAAkBK,OACvCC,aAAgB1D,KAAKoD,kBAAkBO,UACvCC,IAAgB5D,KAAKoD,kBAAkBQ,MAS/CgH,GALAA,EAAqB,IAAIG,EAAAA,eAAe,CACpC7E,QAAS,IAAI7C,EAAAA,QAAQwH,MAIeG,MAAMtG,GAE9C,IAAIuG,EAAWjL,KAAK8C,KAAK+G,QAAQ,IAAIqB,EAAAA,QAAQN,IAAqBO,KAAKC,EAAAA,SAGvE,OAFApL,KAAKqL,eAAeJ,GAEbA,GAGHpI,EAAAhD,UAAAiK,iCAAwBpF,EAA6B4G,GAEzD,IAAIC,EAAoC7G,EAKxC,OAHIA,GACA,OAAc2B,OAAOkF,EAAeD,GAEjCC,GAIH1I,EAAAhD,UAAAwL,wBAAeJ,cACnBA,EAASxD,UAAU,SAAAC,GACfN,EAAKoE,2BAA0B,IAChC,SAAAzC,GACC3B,EAAKoE,2BAA0B,MAW/B3I,EAAAhD,UAAAyG,2BAEJ,IAAIG,EAAWzG,KAAK0G,kBAAkBzC,aAAawH,QAAQ,aAEvDhF,IACAzG,KAAKiD,kBAAoBwD,GAE7BzG,KAAK8K,yBAEF9K,KAAK+C,gBACJ/C,KAAK0I,wBAEL1I,KAAKoD,mBACLpD,KAAK6I,iBAILhG,EAAAhD,UAAA2L,oCAA2B5D,GAC/B,IAAI1B,EAAU0B,EAAK1B,QAEfwF,EAAqB,CACrBnI,YAAgB2C,EAAQ4C,IAAI,gBAC5BtF,OAAgB0C,EAAQ4C,IAAI,UAC5BrF,OAAgByC,EAAQ4C,IAAI,UAC5BnF,UAAgBuC,EAAQ4C,IAAI,cAC5BlF,IAAgBsC,EAAQ4C,IAAI,QAGhC9I,KAAK2L,YAAYD,IAIb7I,EAAAhD,UAAA+L,oCAA2BhE,GAC/B,IAAI8D,EAAqB,CACrBnI,YAAgBqE,EAAiB,WACjCpE,OAAgBoE,EAAgB,UAChCnE,OAAgBmE,EAAa,OAC7BjE,UAAgB,SAChBC,IAAgBgE,EAAU,KAG9B5H,KAAK2L,YAAYD,IAIb7I,EAAAhD,UAAAiL,kCAEJ,IAAIY,EAAqB,CACrBnI,YAAgBU,aAAawH,QAAQ,eACrCjI,OAAgBS,aAAawH,QAAQ,UACrChI,OAAgBQ,aAAawH,QAAQ,UACrC9H,UAAgBM,aAAawH,QAAQ,aACrC7H,IAAgBK,aAAawH,QAAQ,QAGrCzL,KAAK6L,cAAcH,KACnB1L,KAAKoD,kBAAoBsI,IAIzB7I,EAAAhD,UAAA6I,4CACD1I,KAAK+C,eAAe+I,aACnB9L,KAAK+C,eAAe+I,YAAYrE,UAAU,SAAAqE,GACtC,IAAIJ,EAAqB,CACrBnI,YAAgBuI,EAAmB,OAAKA,EAAwB,WAChEtI,OAAgBsI,EAAuB,UACvCrI,OAAgBqI,EAAoB,OACpCnI,UAAgB,SAChBC,IAAgBkI,EAAiB,KAGjC1E,EAAKyE,cAAcH,KACnBtE,EAAKhE,kBAAoBsI,MAWjC7I,EAAAhD,UAAA8L,qBAAYD,GAEZ1L,KAAK6L,cAAcH,KAEnB1L,KAAKoD,kBAAoBsI,EAEzBzH,aAAaC,QAAQ,cAAewH,EAASnI,aAC7CU,aAAaC,QAAQ,SAAUwH,EAASlI,QACxCS,aAAaC,QAAQ,SAAUwH,EAASjI,QACxCQ,aAAaC,QAAQ,YAAawH,EAAS/H,WAC3CM,aAAaC,QAAQ,MAAOwH,EAAS9H,KAEP,MAA1B5D,KAAKiD,mBACLgB,aAAaC,QAAQ,WAAYlE,KAAKiD,kBAAkBC,QAY5DL,EAAAhD,UAAAgM,uBAAcH,GAElB,OAC4B,MAAxBA,EAASnI,aACU,MAAnBmI,EAASlI,QACU,MAAnBkI,EAASjI,QACa,MAAtBiI,EAAS/H,WACO,MAAhB+H,EAAS9H,MAEqB,MAA1B5D,KAAKoD,mBACEsI,EAASjI,QAAUzD,KAAKoD,kBAAkBK,SAcrDZ,EAAAhD,UAAAgH,uBACJ,OAA8B,MAA1B7G,KAAKiD,kBACE,GAEAjD,KAAKiD,kBAAkBwH,KAAO,KAGrC5H,EAAAhD,UAAAkK,sBACJ,IAAIgC,EAAkB,GAQtB,OAN8B,MAA1B/L,KAAK+D,UAAUc,UACfkH,GAAmB/L,KAAK+D,UAAUc,QAAU,KAElB,MAA1B7E,KAAK+D,UAAUa,UACfmH,GAAmB/L,KAAK+D,UAAUa,QAAU,KAEzCmH,GAGHlJ,EAAAhD,UAAAoI,sBAAaF,GACjB,IAAIC,EAOJ,OAHiB,OAFjBA,EAAYhI,KAAK+D,UAAU6B,WAAWmC,MAGlCC,EAAY,SAASD,GAElBC,GAGHnF,EAAAhD,UAAAuI,qBAAYJ,EAAmBE,EAAqB8D,GACxD,IAAIpC,EASJ,OAPAA,EAAW5J,KAAK+D,UAAU2B,UAAS,IAAIsC,EACvC4B,GAAQ,yBAAyBoC,EACjCpC,GAAQ,oBAAoBqC,mBAAmB/D,GAEjB,MAA1BlI,KAAKiD,oBACL2G,GAAO,mBAAmB5J,KAAKiD,kBAAkBC,MAE9C0G,GASH/G,EAAAhD,UAAA2I,0CAAiC0D,GACrC,IAAIC,EAAeC,EAAAA,SAAS,KAExBC,EAAiBC,EAAAA,UAAUnI,OAAQ,WAAWgH,KAC9CoB,EAAAA,MAAM,QACNC,EAAAA,OAAOxM,KAAKyM,4BAOZC,GAJuBL,EAAe5E,UACtCzH,KAAK4L,2BAA2Be,KAAK3M,OAGhBmM,EAAa1E,UAAU,WACxCyE,EAAWU,OACXF,EAAmBG,cAEnBX,EAAWY,YAAY,qBAAsB,QAGrD,OAAOT,GAGHxJ,EAAAhD,UAAA4M,mCAA0B7E,GAC9B,GAAmB,sBAAhBA,EAAKmF,SAAmD,eAAhBnF,EAAKmF,QAC5C,OAAOnF,GAUP/E,EAAAhD,UAAA6G,2BAAkBxD,GACtB,OAAY,MAARA,GAA4C,MAA5BlD,KAAK+D,UAAU0B,UACxB,KAEJzF,KAAK+D,UAAU0B,UAAUuH,KAC5B,SAAAvG,GAAY,OAAAA,EAASvD,OAASA,yBAxmBzCjC,EAAAA,sDAzBGgM,EAAAA,YAFKC,EAAAA,eAAcC,WAAA,CAAA,CAAAC,KAkEdC,EAAAA,kBAlEgBC,EAAAA,OAAMH,WAAA,CAAA,CAAAC,KAmEtBC,EAAAA,gBApET,GCAAE,EAAA,WAsCI,SAAAA,gCAnCHnM,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,SACZC,SAAU,0KAOVC,OAAQ,CAAC,8fAZb,GCEAgM,EAOI,SAAY9I,QAAA,IAAAA,IAAAA,EAAA,IAOR1E,KAAKO,MAAQmE,EAAQnE,MACrBP,KAAKa,IAAM6D,EAAQ7D,KAAO,GAC1Bb,KAAKyN,MAAQ/I,EAAQ+I,OAAS,GAC9BzN,KAAKe,WAAa2D,EAAQ3D,aAAe2M,UAAY,GAAKhJ,EAAQ3D,WAClEf,KAAKoN,KAAO1I,EAAQ0I,MAAQ,IAIvBO,EAA4B,CACrC,IAAIH,EAAU,CACV3M,IAAK,QACL4M,MAAO,QACPL,KAAM,OACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,MAG7B,IAAIN,EAAU,CACV3M,IAAK,WACL4M,MAAO,WACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,OAKpBC,EAA4B,CACrC,IAAIP,EAAU,CACV3M,IAAK,QACL4M,MAAO,QACPL,KAAM,OACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,MAG7B,IAAIN,EAAU,CACV3M,IAAK,WACL4M,MAAO,WACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,MAG7B,IAAIN,EAAU,CACV3M,IAAK,uBACL4M,MAAO,wBACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,OAKpBE,EAAmC,CAC5C,IAAIR,EAAU,CACV3M,IAAK,QACL4M,MAAO,QACPL,KAAM,OACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,OAKpBG,EAAoC,CAC7C,IAAIT,EAAU,CACV3M,IAAK,WACL4M,MAAO,WACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,MAG7B,IAAIN,EAAU,CACV3M,IAAK,uBACL4M,MAAO,wBACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,MAG7B,IAAIN,EAAU,CACV3M,IAAK,kBACL4M,MAAO,eACPL,KAAM,WACNrM,WAAY,CACR6M,EAAAA,WAAWC,SACXD,EAAAA,WAAWE,UAAU,OChHjCI,EAAA,WAsBI,SAAAA,EACW/M,EACAgN,EACAC,GAHX,IAAAhH,EAAApH,KACWA,KAAAmB,aAAAA,EACAnB,KAAAmO,gBAAAA,EACAnO,KAAAoO,QAAAA,EAEPpO,KAAKmB,aAAarB,SAAS6N,GAC3B3N,KAAKmB,aAAaf,QAAQqH,UACtB,SAACG,GAAqB,OAAAR,EAAK+G,gBAAgBjH,OAAOU,GAAMH,UACpD,SAACC,GAAe,OAAAN,EAAKiH,eAAe3G,IACpC,SAACqB,GAAe,OAAA3B,EAAKkH,aAAavF,cAKtCmF,EAAArO,UAAAwO,wBAAezG,GACnB5H,KAAKuO,QAAU,KACfvO,KAAKmB,aAAaX,eAClBR,KAAKoO,QAAQ5J,SAAS,CAAC,gBAGnB0J,EAAArO,UAAAyO,sBAAavF,GACjB/I,KAAKuO,QAAUxF,EAAMpB,OAAO6G,OAC5BxO,KAAKmB,aAAaX,oCApCzBY,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,cACZmN,UAAY,CAAC9O,GACb4B,SAAU,8OANL5B,SAHAkD,SADAyK,EAAAA,YADT,GCAAoB,EAAA,WAsBI,SAAAA,EACWvN,EACAgN,EACAC,GAHX,IAAAhH,EAAApH,KACWA,KAAAmB,aAAAA,EACAnB,KAAAmO,gBAAAA,EACAnO,KAAAoO,QAAAA,EAEPpO,KAAKmB,aAAarB,SAASiO,GAC3B/N,KAAKmB,aAAaf,QAAQqH,UACtB,SAACG,GAAuB,OAAAR,EAAK+G,gBAAgB5H,gBAAgBqB,GAAMH,UAC/D,SAAAC,GAAY,OAAAN,EAAKiH,eAAe3G,IAChC,SAAAqB,GAAY,OAAA3B,EAAKkH,aAAavF,cAKlC2F,EAAA7O,UAAAwO,wBAAezG,GACnB5H,KAAKuO,QAAU,KACfvO,KAAKmB,aAAaX,eAClBR,KAAKoO,QAAQ5J,SAAS,CAAC,gBAGnBkK,EAAA7O,UAAAyO,sBAAavF,GACjB/I,KAAKuO,QAAUxF,EAAMpB,OAAO6G,OAAOG,cACnC3O,KAAKmB,aAAaX,oCApCzBY,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAgB,cAChBmN,UAAgB,CAAC9O,GACjB4B,SAAU,8OANL5B,SAHAkD,SADAyK,EAAAA,YADT,GCAAsB,EAAA,WAiCI,SAAAA,EACYzN,EACAgN,GAFZ,IAAA/G,EAAApH,KACYA,KAAAmB,aAAAA,EACAnB,KAAAmO,gBAAAA,mBAJU,EAMlBnO,KAAKmB,aAAarB,SAASkO,GAC3BhO,KAAKmB,aAAaf,QAAQqH,UACtB,SAACG,GAA4B,OAAAR,EAAK+G,gBAAgB1E,cAAc7B,GAAMH,UAClE,SAAAC,GAAY,OAAAN,EAAKiH,kBACjB,SAAAtF,GAAY,OAAA3B,EAAKkH,0BAKrBM,EAAA/O,UAAAwO,0BACJrO,KAAK6O,YAAa,GAGdD,EAAA/O,UAAAyO,wBACJtO,KAAK6O,YAAa,uBA5CzBzN,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAgB,qBAChBmN,UAAgB,CAAC9O,GACjB4B,SAAU,iZAQVC,OAAQ,CAAC,6RAdJ7B,SAHAkD,OADT,GCAAiM,EAAA,WAqBI,SAAAA,EACW3N,EACAgN,EACAC,GAHX,IAAAhH,EAAApH,KACWA,KAAAmB,aAAAA,EACAnB,KAAAmO,gBAAAA,EACAnO,KAAAoO,QAAAA,EAEPpO,KAAKmB,aAAarB,SAASmO,GAC3BjO,KAAKmB,aAAaf,QAAQqH,UACtB,SAACG,GAA6B,OAAAR,EAAK+G,gBAAgBlF,eAAerB,GAAMH,UACpE,SAAAC,GAAY,OAAAN,EAAKiH,eAAe3G,IAChC,SAAAqB,GAAY,OAAA3B,EAAKkH,aAAavF,cAKlC+F,EAAAjP,UAAAwO,wBAAezG,GACnB5H,KAAKoO,QAAQ5J,SAAS,CAAC,qBAGnBsK,EAAAjP,UAAAyO,sBAAavF,GACjB/I,KAAKuO,QAAUxF,EAAMpB,OAAO6G,OAC5BxO,KAAKmB,aAAaX,oCAjCzBY,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAY,sBACZmN,UAAY,CAAC9O,GACb4B,SAAU,mNANL5B,SAHAkD,SADAyK,EAAAA,YADT,GCWMyB,EAAiB,CAAC,CAChBtE,KAAM,UACNuE,UAAWzB,EACX0B,SAAU,CACN,CAAExE,KAAM,UAAWuE,UAAWd,GAC9B,CAAEzD,KAAM,UAAWuE,UAAWN,GAC9B,CAAEjE,KAAM,iBAAkBuE,UAAWJ,GACrC,CACInE,KAAM,kBACNuE,UAAWF,EACXhL,YAAa,CAACjB,OAKjBqM,EAAYxM,EAAAA,aAAayM,SAASJ,GC1B/CK,EAAA,oDAcC9M,EAAAA,SAAQjB,KAAA,CAAC,CACNkB,QAAS,CACLC,EAAAA,aACAE,EAAAA,aACAL,EACA6M,GAEJvM,aAAc,CACV4K,EACAW,EACAQ,EACAE,EACAE,SA1BR","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\n\n@Injectable()\nexport class A2tFormService {\n\n    // Submit Event\n    public submit$ = new EventEmitter<any>();\n    public submitLock: boolean = false;\n\n    // Form Building\n    public formGroup: FormGroup;\n    public fields: BaseField[];\n\n    constructor() { }\n\n    public initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n\n    public submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n\n    public unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n\n    private _createFormGroup() {\n\n        let group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\n}\n","import { Component }  from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\n\n@Component({\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n})\n\nexport class A2tFormComponent {\n    constructor(public _formService: A2tFormService) { }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n})\n\nexport class A2tFormFieldComponent implements OnInit {\n\n    @Input() question:  BaseField;\n    @Input() form:      FormGroup;\n\n    _control:   AbstractControl;\n\n    ngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n\n    get isValid() {\n        return this._control.valid;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n})\nexport class A2tLinksComponent {\n\n    @Input() case: string;\n\n    constructor() { }\n}","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n})\nexport class A2tErrorComponent {\n\n    @Input() errors: string[];\n\n    constructor() { }\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n})\nexport class A2tHeadlineComponent {\n    constructor() { }\n}","import { NgModule }     from '@angular/core';\nimport { ReactiveFormsModule }  from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent } from './a2t-form/a2t-form.component';\nimport { A2tFormFieldComponent } from './a2t-form/a2t-form-field/a2t-form-field.component';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n})\nexport class A2tSharedModule { }\n","import { Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport {\n    Http,\n    Response,\n    Headers,\n    Request,\n    RequestMethod,\n    RequestOptions,\n    RequestOptionsArgs\n} from '@angular/http';\n\nimport { Observable, interval, fromEvent } from 'rxjs';\nimport { share, pluck, filter } from 'rxjs/operators';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\n\n@Injectable()\nexport class Angular2TokenService implements CanActivate {\n\n    get currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n\n    get currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n\n    get currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n\n    get currentAuthHeaders(): Headers {\n        if (this.atCurrentAuthData != null) {\n            return new Headers({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        return new Headers;\n    }\n\n    private atOptions: Angular2TokenOptions;\n    private atCurrentUserType: UserType;\n    private atCurrentAuthData: AuthData;\n    private atCurrentUserData: UserData;\n\n    constructor(\n        private http: Http,\n        @Optional() private activatedRoute: ActivatedRoute,\n        @Optional() private router: Router\n    ) { }\n\n    userSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n\n    canActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if(this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n\n    // Inital configuration\n    init(options?: Angular2TokenOptions) {\n\n        let defaultOptions: Angular2TokenOptions = {\n            apiPath:                    null,\n            apiBase:                    null,\n\n            signInPath:                 'auth/sign_in',\n            signInRedirect:             null,\n            signInStoredUrlStorageKey:  null,\n\n            signOutPath:                'auth/sign_out',\n            validateTokenPath:          'auth/validate_token',\n            signOutFailedValidate:      false,\n\n            registerAccountPath:        'auth',\n            deleteAccountPath:          'auth',\n            registerAccountCallback:    window.location.href,\n\n            updatePasswordPath:         'auth',\n\n            resetPasswordPath:          'auth/password',\n            resetPasswordCallback:      window.location.href,\n\n            userTypes:                  null,\n\n            oAuthBase:                  window.location.origin,\n            oAuthPaths: {\n                github:                 'auth/github'\n            },\n            oAuthCallbackPath:          'oauth_callback',\n            oAuthWindowType:            'newWindow',\n            oAuthWindowOptions:         null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept':       'application/json'\n                }\n            }\n        };\n\n        this.atOptions = (<any>Object).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n\n    /**\n     *\n     * Actions\n     *\n     */\n\n    // Register request\n    registerAccount(registerData: RegisterData): Observable<Response> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        if (\n            registerData.password_confirmation == null && \n            registerData.passwordConfirmation != null\n        ) {\n            registerData.password_confirmation  = registerData.passwordConfirmation;\n            delete registerData.passwordConfirmation;\n        }\n\n        registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n\n    // Delete Account\n    deleteAccount(): Observable<Response> {\n        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n\n    // Sign in request and set storage\n    signIn(signInData: SignInData): Observable<Response> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let body = JSON.stringify({\n            email:      signInData.email,\n            password:   signInData.password\n        });\n\n        let observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n        return observ;\n    }\n\n    signInOAuth(oAuthType: string) {\n\n        let oAuthPath: string = this.getOAuthPath(oAuthType);\n        let callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n\n    processOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n\n    // Sign out request and delete storage\n    signOut(): Observable<Response> {\n        let observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n\n    // Validate token request\n    validateToken(): Observable<Response> {\n        let observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.subscribe(\n            res => this.atCurrentUserData = res.json().data,\n            error => {\n                if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                    this.signOut();\n                }\n            });\n\n        return observ;\n    }\n\n    // Update password request\n    updatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password:       updatePasswordData.passwordCurrent,\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let body = JSON.stringify(args);\n        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n\n    // Reset password request\n    resetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let body = JSON.stringify({\n            email:          resetPasswordData.email,\n            redirect_url:   this.atOptions.resetPasswordCallback\n        });\n\n        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n\n    /**\n     *\n     * HTTP Wrappers\n     *\n     */\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Get\n        }, options));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Post,\n            body:   body\n        }, options));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Put,\n            body:   body\n        }, options));\n    }\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Delete\n        }, options));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Patch,\n            body:   body\n        }, options));\n    }\n\n    head(path: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request({\n            method: RequestMethod.Head,\n            url:    this.getApiPath() + path\n        });\n    }\n\n    options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Options\n        }, options));\n    }\n\n    // Construct and send Http request\n    request(options: RequestOptionsArgs): Observable<Response> {\n\n        let baseRequestOptions: RequestOptions;\n        let baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n        \n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            (<any>Object).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        baseRequestOptions = new RequestOptions({\n            headers: new Headers(baseHeaders)\n        });\n\n        // Merge standard and custom RequestOptions\n        baseRequestOptions = baseRequestOptions.merge(options);\n\n        let response = this.http.request(new Request(baseRequestOptions)).pipe(share());\n        this.handleResponse(response);\n\n        return response;\n    }\n\n    private mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n\n        let returnOptions: RequestOptionsArgs = options;\n\n        if (options)\n            (<any>Object).assign(returnOptions, addOptions);\n\n        return returnOptions;\n    }\n\n    // Check if response is complete and newer, then update storage\n    private handleResponse(response: Observable<Response>): void {\n        response.subscribe(res => {\n            this.getAuthHeadersFromResponse(<any>res);\n        }, error => {\n            this.getAuthHeadersFromResponse(<any>error);\n        });\n    }\n\n    /**\n     *\n     * Get Auth Data\n     *\n     */\n\n    // Try to load auth data\n    private tryLoadAuthData(): void {\n\n        let userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if(this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n\n    // Parse Auth data from response\n    private getAuthHeadersFromResponse(data: any): void {\n        let headers = data.headers;\n\n        let authData: AuthData = {\n            accessToken:    headers.get('access-token'),\n            client:         headers.get('client'),\n            expiry:         headers.get('expiry'),\n            tokenType:      headers.get('token-type'),\n            uid:            headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Parse Auth data from post message\n    private getAuthDataFromPostMessage(data: any): void {\n        let authData: AuthData = {\n            accessToken:    data['auth_token'],\n            client:         data['client_id'],\n            expiry:         data['expiry'],\n            tokenType:      'Bearer',\n            uid:            data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Try to get auth data from storage.\n    private getAuthDataFromStorage(): void {\n\n        let authData: AuthData = {\n            accessToken:    localStorage.getItem('accessToken'),\n            client:         localStorage.getItem('client'),\n            expiry:         localStorage.getItem('expiry'),\n            tokenType:      localStorage.getItem('tokenType'),\n            uid:            localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n\n    // Try to get auth data from url parameters.\n    private getAuthDataFromParams(): void {\n        if(this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let authData: AuthData = {\n                    accessToken:    queryParams['token'] || queryParams['auth_token'],\n                    client:         queryParams['client_id'],\n                    expiry:         queryParams['expiry'],\n                    tokenType:      'Bearer',\n                    uid:            queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n\n    /**\n     *\n     * Set Auth Data\n     *\n     */\n\n    // Write auth data to storage\n    private setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n\n    /**\n     *\n     * Validate Auth Data\n     *\n     */\n\n    // Check if auth data complete and if response token is newer\n    private checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * Construct Paths / Urls\n     *\n     */\n\n    private getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n\n    private getApiPath(): string {\n        let constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n\n    private getOAuthPath(oAuthType: string): string {\n        let oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n\n    private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let url: string;\n\n        url =   `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url +=  `?omniauth_window_type=${windowType}`;\n        url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n\n    /**\n     *\n     * OAuth\n     *\n     */\n\n    private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let pollerObserv = interval(500);\n\n        let responseObserv = fromEvent(window, 'message').pipe(\n            pluck('data'),\n            filter(this.oAuthWindowResponseFilter)\n        );\n\n        let responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n\n    private oAuthWindowResponseFilter(data: any): any {\n        if(data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n\n    /**\n     *\n     * Utilities\n     *\n     */\n\n    // Match user config by user config name\n    private getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\n\n@Component({\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n})\nexport class A2tUiComponent {\n    constructor() { }\n}\n","import { Validators } from '@angular/forms';\n\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n\n    constructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nexport const SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { SIGN_IN_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n})\nexport class A2tSignInComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { SIGN_UP_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n})\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { RESET_PASSWORD_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n})\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n\n    constructor(\n        private _formService: A2tFormService,\n        private _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n\n    private _handleSuccess() {\n        this._emailSend = true;\n    }\n\n    private _handleError() {\n        this._emailSend = true;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { UPDATE_PASSWORD_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n})\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const a2tRoutes = RouterModule.forChild(routes);\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tSharedModule } from './a2t-shared/a2t-shared.module';\nimport { a2tRoutes } from './a2t-ui.routes';\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n})\nexport class A2tUiModule { }"]}
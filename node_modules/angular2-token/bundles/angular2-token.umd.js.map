{"version":3,"file":"angular2-token.umd.js.map","sources":["ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts","ng://angular2-token/a2t-ui/a2t-shared/a2t-shared.module.ts","ng://angular2-token/angular2-token.service.ts","ng://angular2-token/a2t-ui/a2t-ui.component.ts","ng://angular2-token/a2t-ui/a2t-ui.forms.ts","ng://angular2-token/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts","ng://angular2-token/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts","ng://angular2-token/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts","ng://angular2-token/a2t-ui/a2t-update-password/a2t-update-password.component.ts","ng://angular2-token/a2t-ui/a2t-ui.routes.ts","ng://angular2-token/a2t-ui/a2t-ui.module.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\n\n@Injectable()\nexport class A2tFormService {\n\n    // Submit Event\n    public submit$ = new EventEmitter<any>();\n    public submitLock: boolean = false;\n\n    // Form Building\n    public formGroup: FormGroup;\n    public fields: BaseField[];\n\n    constructor() { }\n\n    public initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n\n    public submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n\n    public unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n\n    private _createFormGroup() {\n\n        let group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\n}\n","import { Component }  from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\n\n@Component({\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n})\n\nexport class A2tFormComponent {\n    constructor(public _formService: A2tFormService) { }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n})\n\nexport class A2tFormFieldComponent implements OnInit {\n\n    @Input() question:  BaseField;\n    @Input() form:      FormGroup;\n\n    _control:   AbstractControl;\n\n    ngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n\n    get isValid() {\n        return this._control.valid;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n})\nexport class A2tLinksComponent {\n\n    @Input() case: string;\n\n    constructor() { }\n}","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n})\nexport class A2tErrorComponent {\n\n    @Input() errors: string[];\n\n    constructor() { }\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n})\nexport class A2tHeadlineComponent {\n    constructor() { }\n}","import { NgModule }     from '@angular/core';\nimport { ReactiveFormsModule }  from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent } from './a2t-form/a2t-form.component';\nimport { A2tFormFieldComponent } from './a2t-form/a2t-form-field/a2t-form-field.component';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n})\nexport class A2tSharedModule { }\n","import { Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport {\n    Http,\n    Response,\n    Headers,\n    Request,\n    RequestMethod,\n    RequestOptions,\n    RequestOptionsArgs\n} from '@angular/http';\n\nimport { Observable, interval, fromEvent } from 'rxjs';\nimport { share, pluck, filter } from 'rxjs/operators';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\n\n@Injectable()\nexport class Angular2TokenService implements CanActivate {\n\n    get currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n\n    get currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n\n    get currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n\n    get currentAuthHeaders(): Headers {\n        if (this.atCurrentAuthData != null) {\n            return new Headers({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        return new Headers;\n    }\n\n    private atOptions: Angular2TokenOptions;\n    private atCurrentUserType: UserType;\n    private atCurrentAuthData: AuthData;\n    private atCurrentUserData: UserData;\n\n    constructor(\n        private http: Http,\n        @Optional() private activatedRoute: ActivatedRoute,\n        @Optional() private router: Router\n    ) { }\n\n    userSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n\n    canActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if(this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n\n    // Inital configuration\n    init(options?: Angular2TokenOptions) {\n\n        let defaultOptions: Angular2TokenOptions = {\n            apiPath:                    null,\n            apiBase:                    null,\n\n            signInPath:                 'auth/sign_in',\n            signInRedirect:             null,\n            signInStoredUrlStorageKey:  null,\n\n            signOutPath:                'auth/sign_out',\n            validateTokenPath:          'auth/validate_token',\n            signOutFailedValidate:      false,\n\n            registerAccountPath:        'auth',\n            deleteAccountPath:          'auth',\n            registerAccountCallback:    window.location.href,\n\n            updatePasswordPath:         'auth',\n\n            resetPasswordPath:          'auth/password',\n            resetPasswordCallback:      window.location.href,\n\n            userTypes:                  null,\n\n            oAuthBase:                  window.location.origin,\n            oAuthPaths: {\n                github:                 'auth/github'\n            },\n            oAuthCallbackPath:          'oauth_callback',\n            oAuthWindowType:            'newWindow',\n            oAuthWindowOptions:         null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept':       'application/json'\n                }\n            }\n        };\n\n        this.atOptions = (<any>Object).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n\n    /**\n     *\n     * Actions\n     *\n     */\n\n    // Register request\n    registerAccount(registerData: RegisterData): Observable<Response> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        if (\n            registerData.password_confirmation == null && \n            registerData.passwordConfirmation != null\n        ) {\n            registerData.password_confirmation  = registerData.passwordConfirmation;\n            delete registerData.passwordConfirmation;\n        }\n\n        registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n\n    // Delete Account\n    deleteAccount(): Observable<Response> {\n        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n\n    // Sign in request and set storage\n    signIn(signInData: SignInData): Observable<Response> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let body = JSON.stringify({\n            email:      signInData.email,\n            password:   signInData.password\n        });\n\n        let observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n        return observ;\n    }\n\n    signInOAuth(oAuthType: string) {\n\n        let oAuthPath: string = this.getOAuthPath(oAuthType);\n        let callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n\n    processOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n\n    // Sign out request and delete storage\n    signOut(): Observable<Response> {\n        let observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n\n    // Validate token request\n    validateToken(): Observable<Response> {\n        let observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.subscribe(\n            res => this.atCurrentUserData = res.json().data,\n            error => {\n                if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                    this.signOut();\n                }\n            });\n\n        return observ;\n    }\n\n    // Update password request\n    updatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password:       updatePasswordData.passwordCurrent,\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let body = JSON.stringify(args);\n        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n\n    // Reset password request\n    resetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let body = JSON.stringify({\n            email:          resetPasswordData.email,\n            redirect_url:   this.atOptions.resetPasswordCallback\n        });\n\n        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n\n    /**\n     *\n     * HTTP Wrappers\n     *\n     */\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Get\n        }, options));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Post,\n            body:   body\n        }, options));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Put,\n            body:   body\n        }, options));\n    }\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Delete\n        }, options));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Patch,\n            body:   body\n        }, options));\n    }\n\n    head(path: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request({\n            method: RequestMethod.Head,\n            url:    this.getApiPath() + path\n        });\n    }\n\n    options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Options\n        }, options));\n    }\n\n    // Construct and send Http request\n    request(options: RequestOptionsArgs): Observable<Response> {\n\n        let baseRequestOptions: RequestOptions;\n        let baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n        \n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            (<any>Object).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        baseRequestOptions = new RequestOptions({\n            headers: new Headers(baseHeaders)\n        });\n\n        // Merge standard and custom RequestOptions\n        baseRequestOptions = baseRequestOptions.merge(options);\n\n        let response = this.http.request(new Request(baseRequestOptions)).pipe(share());\n        this.handleResponse(response);\n\n        return response;\n    }\n\n    private mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n\n        let returnOptions: RequestOptionsArgs = options;\n\n        if (options)\n            (<any>Object).assign(returnOptions, addOptions);\n\n        return returnOptions;\n    }\n\n    // Check if response is complete and newer, then update storage\n    private handleResponse(response: Observable<Response>): void {\n        response.subscribe(res => {\n            this.getAuthHeadersFromResponse(<any>res);\n        }, error => {\n            this.getAuthHeadersFromResponse(<any>error);\n        });\n    }\n\n    /**\n     *\n     * Get Auth Data\n     *\n     */\n\n    // Try to load auth data\n    private tryLoadAuthData(): void {\n\n        let userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if(this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n\n    // Parse Auth data from response\n    private getAuthHeadersFromResponse(data: any): void {\n        let headers = data.headers;\n\n        let authData: AuthData = {\n            accessToken:    headers.get('access-token'),\n            client:         headers.get('client'),\n            expiry:         headers.get('expiry'),\n            tokenType:      headers.get('token-type'),\n            uid:            headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Parse Auth data from post message\n    private getAuthDataFromPostMessage(data: any): void {\n        let authData: AuthData = {\n            accessToken:    data['auth_token'],\n            client:         data['client_id'],\n            expiry:         data['expiry'],\n            tokenType:      'Bearer',\n            uid:            data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Try to get auth data from storage.\n    private getAuthDataFromStorage(): void {\n\n        let authData: AuthData = {\n            accessToken:    localStorage.getItem('accessToken'),\n            client:         localStorage.getItem('client'),\n            expiry:         localStorage.getItem('expiry'),\n            tokenType:      localStorage.getItem('tokenType'),\n            uid:            localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n\n    // Try to get auth data from url parameters.\n    private getAuthDataFromParams(): void {\n        if(this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let authData: AuthData = {\n                    accessToken:    queryParams['token'] || queryParams['auth_token'],\n                    client:         queryParams['client_id'],\n                    expiry:         queryParams['expiry'],\n                    tokenType:      'Bearer',\n                    uid:            queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n\n    /**\n     *\n     * Set Auth Data\n     *\n     */\n\n    // Write auth data to storage\n    private setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n\n    /**\n     *\n     * Validate Auth Data\n     *\n     */\n\n    // Check if auth data complete and if response token is newer\n    private checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * Construct Paths / Urls\n     *\n     */\n\n    private getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n\n    private getApiPath(): string {\n        let constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n\n    private getOAuthPath(oAuthType: string): string {\n        let oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n\n    private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let url: string;\n\n        url =   `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url +=  `?omniauth_window_type=${windowType}`;\n        url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n\n    /**\n     *\n     * OAuth\n     *\n     */\n\n    private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let pollerObserv = interval(500);\n\n        let responseObserv = fromEvent(window, 'message').pipe(\n            pluck('data'),\n            filter(this.oAuthWindowResponseFilter)\n        );\n\n        let responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n\n    private oAuthWindowResponseFilter(data: any): any {\n        if(data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n\n    /**\n     *\n     * Utilities\n     *\n     */\n\n    // Match user config by user config name\n    private getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\n\n@Component({\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n})\nexport class A2tUiComponent {\n    constructor() { }\n}\n","import { Validators } from '@angular/forms';\n\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n\n    constructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nexport const SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { SIGN_IN_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n})\nexport class A2tSignInComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { SIGN_UP_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n})\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { RESET_PASSWORD_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n})\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n\n    constructor(\n        private _formService: A2tFormService,\n        private _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n\n    private _handleSuccess() {\n        this._emailSend = true;\n    }\n\n    private _handleError() {\n        this._emailSend = true;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared/a2t-form/a2t-form.service';\nimport { UPDATE_PASSWORD_FORM } from '../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n})\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const a2tRoutes = RouterModule.forChild(routes);\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tSharedModule } from './a2t-shared/a2t-shared.module';\nimport { a2tRoutes } from './a2t-ui.routes';\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n})\nexport class A2tUiModule { }"],"names":["EventEmitter","FormControl","FormGroup","Injectable","Component","Input","NgModule","CommonModule","ReactiveFormsModule","RouterModule","http","router","Headers","RequestMethod","RequestOptions","Request","share","interval","fromEvent","pluck","filter","Http","ActivatedRoute","Optional","Router","Validators"],"mappings":"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"}
